/*
 Navicat Premium Data Transfer

 Source Server         : itchenliang
 Source Server Type    : MySQL
 Source Server Version : 50715
 Source Host           : 124.222.54.192:3306
 Source Schema         : picture-bed-backup

 Target Server Type    : MySQL
 Target Server Version : 50715
 File Encoding         : 65001

 Date: 07/03/2023 08:43:04
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for album
-- ----------------------------
DROP TABLE IF EXISTS `album`;
CREATE TABLE `album`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户id',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '相册名称',
  `desc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '相册描述',
  `cover` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '相册封面',
  `background` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '相册背景',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `sort` float NULL DEFAULT 1 COMMENT '排序值',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of album
-- ----------------------------

-- ----------------------------
-- Table structure for bucket
-- ----------------------------
DROP TABLE IF EXISTS `bucket`;
CREATE TABLE `bucket`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储桶类别',
  `tag` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储桶标签',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储桶名称',
  `config` json NOT NULL COMMENT '存储桶配置',
  `visible` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否在上传区域显示',
  `uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '操作人，用户id',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `plugin` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '存储桶插件',
  `version` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1.0.0' COMMENT '存储源版本',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bucket
-- ----------------------------

-- ----------------------------
-- Table structure for bucketsource
-- ----------------------------
DROP TABLE IF EXISTS `bucketsource`;
CREATE TABLE `bucketsource`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储源名称',
  `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储源类型',
  `config` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储源配置',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '存储源状态',
  `version` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1.0.0' COMMENT '存储源版本',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bucketsource
-- ----------------------------
INSERT INTO `bucketsource` VALUES ('1c471b96-6ddd-454e-97f1-7414ca122008', '青云对象存储', 'qingstor', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-13 09:25:25', '2022-12-19 06:30:35', 1, '1.0.3');
INSERT INTO `bucketsource` VALUES ('2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '阿里云OSS', 'oss', '(() => {\r\n  return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#阿里云-oss\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-11-03 06:29:37', '2023-02-23 05:32:03', 1, '1.0.7');
INSERT INTO `bucketsource` VALUES ('51f58e71-0a37-4c44-b2e7-d53e70c63109', '华为云OBS', 'obs', '[{\"type\": \"string\", \"label\": \"设定用户名\", \"value\": \"username\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入github用户名\"}, {\"type\": \"string\", \"label\": \"设定仓库名\", \"value\": \"repo\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入github仓库名\"}, {\"type\": \"string\", \"label\": \"分支\", \"value\": \"branch\", \"default\": \"main\", \"required\": true, \"placeholder\": \"请输入github仓库分支名\"}, {\"type\": \"string\", \"label\": \"私人令牌\", \"value\": \"token\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入github token\"}, {\"type\": \"string\", \"label\": \"指定存储路径\", \"value\": \"path\", \"default\": \"\", \"required\": false, \"placeholder\": \"例如img/\"}, {\"type\": \"string\", \"label\": \"设定自定义域名\", \"value\": \"domain\", \"default\": \"\", \"required\": false, \"placeholder\": \"例如https://xxxx.com\"}, {\"type\": \"string\", \"label\": \"提交说明\", \"value\": \"commit_messages\", \"default\": \"upload ${filename}\", \"required\": false, \"placeholder\": \"例如 upload test\"}, {\"type\": \"string\", \"label\": \"访问前缀\", \"value\": \"baseUrl\", \"hidden\": true, \"default\": \"https://raw.githubusercontent.com/${username}/${repo}/${branch}/\", \"required\": false, \"placeholder\": \"请输入baseUrl\"}, {\"type\": \"string\", \"label\": \"服务地址|域名地址\", \"value\": \"host\", \"hidden\": true, \"default\": \"https://api.github.com/repos/\", \"required\": false, \"placeholder\": \"请输入服务地址\"}]', '2022-10-25 05:59:42', '2022-11-01 08:19:59', 0, '1.0.0');
INSERT INTO `bucketsource` VALUES ('607eb9fe-5f38-4beb-86c0-84b4b97aeba1', ' 腾讯COS', 'cos', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#腾讯云-cos\',\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-10-24 02:24:04', '2023-02-23 05:32:26', 1, '1.0.4');
INSERT INTO `bucketsource` VALUES ('6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '又拍云USS', 'uss', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#又拍云uss\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名，本示例试用的是基本认证\r\n      // 参考：https://help.upyun.com/knowledge-base/object_storage_authorization/\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-11-03 06:29:52', '2023-02-23 05:32:57', 1, '1.0.4');
INSERT INTO `bucketsource` VALUES ('8f86a45d-34a6-4a50-b13a-e8195e0227a2', 'NextCloud网盘', 'nextcloud', '[{\"type\": \"string\", \"label\": \"AppID\", \"value\": \"appId\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入leancloud的appid\"}, {\"type\": \"string\", \"label\": \"appkey\", \"value\": \"appkey\", \"default\": \"123\", \"required\": false, \"placeholder\": \"请输入leancloud的appid\"}, {\"type\": \"string\", \"label\": \"访问前缀\", \"value\": \"baseUrl\", \"hidden\": true, \"default\": \"https://raw.githubusercontent.com/${username}/${repo}\", \"required\": false, \"placeholder\": \"请输入baseUrl\"}]', '2022-11-03 06:30:18', '2022-11-03 06:35:22', 0, '1.0.0');
INSERT INTO `bucketsource` VALUES ('9449c07e-514a-456f-a781-31e2c06f3af1', '七牛云 KODO', 'qiniu', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#七牛云-kodo\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AccessKey\",\r\n          \"field\":\"accessKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"password\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket_name\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入自定义域名\",\r\n          \"tips\": \"以http://或https://开头，末尾无需斜杠\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"设定存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"qiniu.region.z0\",\r\n          \"required\":true,\r\n          \"options\": [\r\n            {\r\n              \"label\": \"华东区域\",\r\n              \"value\": \"qiniu.region.z0\"\r\n            },\r\n            {\r\n              \"label\": \"华北区域\",\r\n              \"value\": \"qiniu.region.z1\"\r\n            },\r\n            {\r\n              \"label\": \"华南区域\",\r\n              \"value\": \"qiniu.region.z2\"\r\n            },\r\n            {\r\n              \"label\": \"北美区域\",\r\n              \"value\": \"qiniu.region.na0\"\r\n            },\r\n            {\r\n              \"label\": \"新加坡区域\",\r\n              \"value\": \"qiniu.region.as0\"\r\n            }\r\n          ],\r\n          \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定网址后缀\",\r\n          \"field\":\"suffix\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"访问前缀\",\r\n          \"field\":\"baseUrl\",\r\n          \"hidden\":true,\r\n          \"default\":\"${config.domain}\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-10-24 02:24:23', '2023-02-23 05:31:30', 1, '1.0.3');
INSERT INTO `bucketsource` VALUES ('a3e15fa5-a5fc-48f7-8496-6b8ce0db222c', 'Leancloud图床', 'leancloud', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"请求token接口地址\",\r\n        \"field\":\"api_url\",\r\n        \"default\": \"\",\r\n        \"required\": true,\r\n        \"placeholder\":\"https://dzncsgi3.lc-cn-n1-shared.com/1.1/fileTokens\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"自定义域名\",\r\n        \"field\":\"domain\",\r\n        \"default\": \"\",\r\n        \"required\": true,\r\n        \"placeholder\":\"请输入自定义域名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"${config.domain}\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'${config.api_url}\',\r\n          method: \"POST\",\r\n          data: {\r\n            name: file.filename,\r\n            metaData: {\r\n              size: file.file.size,\r\n              owner: \'unkown\'\r\n            }\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.token)\r\n        formData.append(\'key\', res.data.key)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: res.data.upload_url,\r\n          method: \'post\',\r\n          data: formData,\r\n          headers: {\r\n            accept: \'*/*\',\r\n            \'accept-encoding\': \'gzip, deflate, br\',\r\n            \'accept-language\': \'zh-CN,zh;q=0.9\',\r\n            \'content-length\': 64,\r\n            \'content-type\': \'application/json;charset=UTF-8\',\r\n            \'sec-ch-ua\': \'\"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\", \"Google Chrome\";v=\"108\"\',\r\n            \'sec-ch-ua-mobile\':\' ?0\',\r\n            \'sec-ch-ua-platform\': \"Windows\",\r\n            \'sec-fetch-dest\': \'empty\',\r\n            \'sec-fetch-mode\': \'cors\',\r\n            \'sec-fetch-site\': \'cross-site\',\r\n            \'user-agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\',\r\n            \'x-lc-id\': \'DZNcsGI3WVFNYIVdNCUUHeRy-gzGzoHsz\',\r\n            \'x-lc-sign\': \'e91b4aa58dcaf4f58549826a679f5fac,1670493759853\',\r\n            \'x-lc-ua\': \'LeanCloud-JS-SDK/4.13.2 (Browser)\'\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-10-24 02:23:53', '2022-12-08 10:05:18', 0, '1.0.0');
INSERT INTO `bucketsource` VALUES ('cb0e06ae-49c9-4c13-9d48-f20093ca53d0', '天翼云 OOS', 'oos', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AccessKey\",\r\n          \"field\":\"accessKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket_name\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定访问网址\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入访问网址\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"设定存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"qiniu.region.z0\",\r\n          \"required\":true,\r\n          \"options\": [\r\n            {\r\n              \"label\": \"华东区域\",\r\n              \"value\": \"qiniu.region.z0\"\r\n            },\r\n            {\r\n              \"label\": \"华北区域\",\r\n              \"value\": \"qiniu.region.z1\"\r\n            },\r\n            {\r\n              \"label\": \"华南区域\",\r\n              \"value\": \"qiniu.region.z2\"\r\n            },\r\n            {\r\n              \"label\": \"北美区域\",\r\n              \"value\": \"qiniu.region.na0\"\r\n            },\r\n            {\r\n              \"label\": \"新加坡区域\",\r\n              \"value\": \"qiniu.region.as0\"\r\n            }\r\n          ],\r\n          \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定网址后缀\",\r\n          \"field\":\"suffix\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"访问前缀\",\r\n          \"field\":\"baseUrl\",\r\n          \"hidden\":true,\r\n          \"default\":\"${config.domain}\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-07 09:43:26', '2022-12-08 09:43:26', 1, '1.0.0');
INSERT INTO `bucketsource` VALUES ('f4fe0250-e404-4b27-891e-49d2b67e5e3e', 'Gitee图床', 'gitee', '(() => {\r\n	return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#gitee\',\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库名称\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"password\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${file.filename} by pic bed\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${config.username}/${config.repo}/raw/${config.branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '2022-10-24 02:23:17', '2023-02-23 05:30:07', 1, '1.0.4');
INSERT INTO `bucketsource` VALUES ('f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', 'Github + jsDelivr图床', 'github', '(() => {\r\n  return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#github--jsdelivr\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            // \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}@${config.branch}/\",\r\n            \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-10-24 02:22:56', '2023-02-23 05:33:22', 1, '1.0.5');

-- ----------------------------
-- Table structure for bucketsourcehistory
-- ----------------------------
DROP TABLE IF EXISTS `bucketsourcehistory`;
CREATE TABLE `bucketsourcehistory`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid:历史记录id',
  `bs_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储源id',
  `config` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '当前最新存储源配置',
  `config_old` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '旧版本存储源配置',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `version` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1.0.0' COMMENT '最新版本号',
  `version_old` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1.0.0' COMMENT '旧版本号',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bucketsourcehistory
-- ----------------------------
INSERT INTO `bucketsourcehistory` VALUES ('00a7b7f5-ab5a-43fd-84ce-f414fa0e992c', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'/${config.path}\' + file.filename,\r\n          date: date,\r\n          policy: \'\',\r\n          // contentMd5: this.md5()\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'/${config.path}\' + file.filename,\r\n          date: date,\r\n          policy: \'\',\r\n          // contentMd5: this.md5()\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 07:53:27', '2022-12-14 07:53:27', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('04f4570c-ad80-431f-bf47-567645c93904', 'f4fe0250-e404-4b27-891e-49d2b67e5e3e', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${file.filename} by pic bed\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${config.username}/${config.repo}/raw/${config.branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${file.filename} by pic bed\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '2022-12-10 06:39:00', '2022-12-10 06:39:00', '1.0.2', '1.0.1', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('0526f3be-e8e6-4c62-8b79-3a4f393c4a8d', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename,\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:37:49', '2022-12-12 05:37:49', '1.0.5', '1.0.5', '添加如果添加了自定义后缀，则自动添加到url中');
INSERT INTO `bucketsourcehistory` VALUES ('0a3438a0-323a-4ba0-a754-fe8f0419d81c', 'f4fe0250-e404-4b27-891e-49d2b67e5e3e', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${filename} by pic bed\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"optios\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${filename} by pic bed\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '2022-12-10 06:36:08', '2022-12-10 06:36:08', '1.0.1', '1.0.1', '最终');
INSERT INTO `bucketsourcehistory` VALUES ('0a4fbe8a-3cec-44cb-b2ae-a02d44a73b85', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名，本示例试用的是基本认证\r\n      // 参考：https://help.upyun.com/knowledge-base/object_storage_authorization/\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:55:50', '2022-12-14 08:55:50', '1.0.3', '1.0.3', '11');
INSERT INTO `bucketsourcehistory` VALUES ('0ac3c1b9-b771-4307-a58d-9be80093838f', '841ef04a-2ad2-451a-993b-6002db343a5b', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\r\n    config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定AccessKey\",\r\n        \"field\":\"accessKey\",\r\n        \"default\":\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定存储空间名\",\r\n        \"field\":\"bucket_name\",\r\n        \"default\":\"yaju\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定访问网址\",\r\n        \"field\":\"domain\",\r\n        \"default\":\"http://img.itchenliang.club/\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入访问网址\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"设定存储区域\",\r\n        \"field\":\"area\",\r\n        \"default\":\"qiniu.region.z0\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"options\": [\r\n          {\r\n            \"label\": \"华东区域\",\r\n            \"value\": \"qiniu.region.z0\"\r\n          },\r\n          {\r\n            \"label\": \"华北区域\",\r\n            \"value\": \"qiniu.region.z1\"\r\n          },\r\n          {\r\n            \"label\": \"华南区域\",\r\n            \"value\": \"qiniu.region.z2\"\r\n          },\r\n          {\r\n            \"label\": \"北美区域\",\r\n            \"value\": \"qiniu.region.na0\"\r\n          },\r\n          {\r\n            \"label\": \"新加坡区域\",\r\n            \"value\": \"qiniu.region.as0\"\r\n          }\r\n        ],\r\n        \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"指定存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"picture-ped-img/\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"${config.domain}\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\r\n    config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定AccessKey\",\r\n        \"field\":\"accessKey\",\r\n        \"default\":\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定存储空间名\",\r\n        \"field\":\"bucket_name\",\r\n        \"default\":\"yaju\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定访问网址\",\r\n        \"field\":\"domain\",\r\n        \"default\":\"https://imgs.itchenliang.club/\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入访问网址\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"设定存储区域\",\r\n        \"field\":\"area\",\r\n        \"default\":\"qiniu.region.z0\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"options\": [\r\n          {\r\n            \"label\": \"华东区域\",\r\n            \"value\": \"qiniu.region.z0\"\r\n          },\r\n          {\r\n            \"label\": \"华北区域\",\r\n            \"value\": \"qiniu.region.z1\"\r\n          },\r\n          {\r\n            \"label\": \"华南区域\",\r\n            \"value\": \"qiniu.region.z2\"\r\n          },\r\n          {\r\n            \"label\": \"北美区域\",\r\n            \"value\": \"qiniu.region.na0\"\r\n          },\r\n          {\r\n            \"label\": \"新加坡区域\",\r\n            \"value\": \"qiniu.region.as0\"\r\n          }\r\n        ],\r\n        \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"指定存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"picture-ped-img/\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"${config.domain}\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-03-02 01:57:58', '2023-03-02 01:57:58', '1.0.2', '1.0.1', '修改加速域名https -> http');
INSERT INTO `bucketsourcehistory` VALUES ('11657997-1301-4257-8526-0771d3525737', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n          // ${url.protocol}://${options.zone}.${url.host}/${options.bucket}${path}/${encodeURI(fileName)}\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com/${config.path}\" + file.filename,\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            // Date: new Date().toUTCString(),\r\n            Date: new Date((new Date().getTime() + 300000)).toUTCString(),\r\n            \'User-Agent\': \'picgo_plugin_qingstor\',\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            // Date: new Date().toUTCString(),\r\n            Date: new Date((new Date().getTime() + 300000)).toUTCString(),\r\n            \'User-Agent\': \'picgo_plugin_qingstor\',\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-19 06:29:39', '2022-12-19 06:29:39', '1.0.4', '1.0.4', '123');
INSERT INTO `bucketsourcehistory` VALUES ('11e4828a-383d-4374-b8d8-9ea637b33c91', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 03:02:19', '2022-12-13 03:02:19', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('13c3d401-c873-432c-8e20-3a65f048eec6', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 02:43:32', '2022-12-13 02:43:32', '1.0.2', '1.0.2', '啊啊');
INSERT INTO `bucketsourcehistory` VALUES ('175e5e75-5069-4d28-8dbf-4748c61b1fa7', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'upload \' + file.filename\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'${config.commit_messages}\'\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 09:42:09', '2022-12-09 09:42:09', '1.0.2', '1.0.2', 'feat:更新上传的message说明');
INSERT INTO `bucketsourcehistory` VALUES ('187abdb2-fa95-46c8-99e2-f56e96142d9c', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#又拍云uss\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名，本示例试用的是基本认证\r\n      // 参考：https://help.upyun.com/knowledge-base/object_storage_authorization/\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名，本示例试用的是基本认证\r\n      // 参考：https://help.upyun.com/knowledge-base/object_storage_authorization/\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-02-23 05:32:57', '2023-02-23 05:32:57', '1.0.4', '1.0.3', '添加文档地址');
INSERT INTO `bucketsourcehistory` VALUES ('1884af3f-5068-430e-9b36-05f2e8834418', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        const operator = \'${config.operator}\'\r\n        const sign = this.hmacsha1(operator + \':\' + md5Pwd)\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:49:07', '2022-12-14 08:49:07', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('19ae8186-5fec-4004-b8df-77ceca0f462b', 'f4fe0250-e404-4b27-891e-49d2b67e5e3e', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${file.filename} by pic bed\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${filename} by pic bed\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '2022-12-10 06:37:05', '2022-12-10 06:37:05', '1.0.1', '1.0.1', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('19bed8fd-e73d-4007-b190-42670a943207', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"switch\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"options\": [\'v5\', \'v4\']\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '[{\"type\": \"string\", \"label\": \"AppID\", \"value\": \"appId\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入leancloud的appid\"}, {\"type\": \"string\", \"label\": \"appkey\", \"value\": \"appkey\", \"default\": \"123\", \"required\": false, \"placeholder\": \"请输入leancloud的appid\"}, {\"type\": \"string\", \"label\": \"访问前缀\", \"value\": \"baseUrl\", \"hidden\": true, \"default\": \"https://raw.githubusercontent.com/${username}/${repo}\", \"required\": false, \"placeholder\": \"请输入baseUrl\"}]', '2022-12-12 05:44:34', '2022-12-12 05:44:34', '1.0.1', '1.0.0', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('1a52974d-b176-44e1-979f-8c68044d20c6', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": [\'v5\', \'v4\']\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"switch\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"options\": [\'v5\', \'v4\']\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:49:28', '2022-12-12 05:49:28', '1.0.2', '1.0.1', '将switch修改成choice类型并新增choices列表');
INSERT INTO `bucketsourcehistory` VALUES ('1ad8781e-f936-400b-9c21-4e8f9ef0f05e', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            // Date: new Date().toUTCString(),\r\n            Date: new Date((new Date().getTime() + 300000)).toUTCString(),\r\n            \'User-Agent\': \'picgo_plugin_qingstor\',\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'User-Agent\': \'picgo_plugin_qingstor\',\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-19 06:25:10', '2022-12-19 06:25:10', '1.0.4', '1.0.3', '123');
INSERT INTO `bucketsourcehistory` VALUES ('1d68f25e-fccb-4eaa-87e0-e852bfc964b2', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:39:08', '2022-12-12 05:39:08', '1.0.5', '1.0.5', '去除非必要的注释');
INSERT INTO `bucketsourcehistory` VALUES ('1e94ccbb-bb06-4cbc-839f-3f301ef3f4f7', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = [\'PUT\']\r\n        data.push(options[\'path\'])\r\n        data.push(options[\'date\'])\r\n        // 签名\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        // const blobFile = new Blob([file.file], {\r\n        //   type: \'text/plain\'\r\n        // })\r\n        // const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = [\'PUT\']\r\n        data.push(options[\'path\'])\r\n        data.push(options[\'date\'])\r\n        console.log(data)\r\n        // 签名\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        console.log(md5Pwd)\r\n        const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:21:55', '2022-12-14 08:21:55', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('1f8930ac-2c36-4d1c-9507-50305b6b00ff', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#阿里云-oss\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-02-23 05:32:03', '2023-02-23 05:32:03', '1.0.7', '1.0.6', '添加文档地址');
INSERT INTO `bucketsourcehistory` VALUES ('238e9d75-5ed8-4a26-b70b-4f57c77d5d55', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'upload \' + file.filename\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 09:59:04', '2022-12-09 09:59:04', '1.0.2', '1.0.2', 'feat:更新commit_messages上传说明');
INSERT INTO `bucketsourcehistory` VALUES ('26d91573-74f8-4ed0-869b-110ed1346f99', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      getSuffix: function (file) {\r\n        return \'png\'\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: function (file) {\r\n        // 获取signature\r\n        const date = new Date().toUTCString()\r\n        const mimeType = mimeTypes[this.getSuffix(file)]\r\n        const signString = \'PUT\\n\\n\' + mimeType + \'\\n\' + date + \'\\n/${config.bucket}/${config.path}\' + file.filename\r\n        const signature = this.crypto.createHmac(\'sha1\', \'${config.accessKeySecret}\').update(signString).digest(\'base64\')\r\n        console.log(signature)\r\n        return \'OSS ${config.accessKeyId}:\' + signature\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: this.beforeEach(file),\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': this.getSuffix(file)\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      getSuffix: function (file) {\r\n        return \'png\'\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: function (file) {\r\n        // 获取signature\r\n        const date = new Date().toUTCString()\r\n        const mimeType = mimeTypes[this.getSuffix(file)]\r\n        const signString = \'PUT\\n\\n\' + mimeType + \'\\n\' + date + \'\\n/${config.bucket}/${config.path}\' + file.filename\r\n        const signature = this.crypto.createHmac(\'sha1\', \'${config.accessKeySecret}\').update(signString).digest(\'base64\')\r\n        return \'OSS ${config.accessKeyId}:\' + signature\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/${encodeURI(options.path)}${encodeURI(fileName)}\',\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: this.beforeEach(file),\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': this.getSuffix(file)\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 01:59:56', '2022-12-12 01:59:56', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('289eb825-924e-4f7e-8166-2bfb99d732af', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await toArrayBuffer(await toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 02:24:30', '2022-12-13 02:24:30', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('2b18ef49-9a1b-406d-8ec3-67910851b8b9', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(this.mime.lookup(file.filename))\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${options.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: this.beforeEach(file),\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 03:24:55', '2022-12-12 03:24:55', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('2c9961cb-9796-4fff-a1c0-c914378c7656', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.hmacsha1(\'${config.secret_access_key}\', policy)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:50:19', '2022-12-14 09:50:19', '1.0.2', '1.0.2', '11');
INSERT INTO `bucketsourcehistory` VALUES ('2ca05f81-f877-4e06-876e-129c6cdb6f7d', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": [\r\n            { label: \'v5\', value: \'v5\', active: true },\r\n            { label: \'v4\', value: \'v4\', active: false }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": [\'v4\', \'v5\']\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:51:47', '2022-12-12 05:51:47', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('2d129377-84e8-4ad2-ac99-2f6ccbfe2a3f', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.accessKeyId}\')\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: await this.fileToBase64(file.file),\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'image/png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 04:49:29', '2022-12-12 04:49:29', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('31efbcbb-e3c3-4800-b20b-6d11c2776082', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            // \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}@${config.branch}/\",\r\n            \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}@${config.branch}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 14:28:46', '2022-12-09 14:28:46', '1.0.4', '1.0.4', 'dd');
INSERT INTO `bucketsourcehistory` VALUES ('33b4e88c-3250-46d6-9707-e44a2873a0c7', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toArrayBuffer: function (value) {\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 02:26:32', '2022-12-13 02:26:32', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('3b1919ba-4fb1-4d55-bc1d-ab8a5df7882e', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        console.log(tmp)\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          console.log(keys)\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        console.log(tmp)\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        console.log(tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 10:01:51', '2022-12-09 10:01:51', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('3c57c908-37b5-4e55-8ac8-62a5bd5fd2b4', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toArrayBuffer: function (value) {\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await toArrayBuffer(await toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 02:25:34', '2022-12-13 02:25:34', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('3dc6649b-e91d-48a7-b428-c29a9c1a7176', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          const content = await this.useFileToBase64(file.file)\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: window.btoa(encodeURI(content))\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file, true)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 08:30:38', '2022-12-12 08:30:38', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('3fb765b9-4b93-411d-992d-68d78b821780', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = {}\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n        // const res = await this.beforeEach(file)\r\n        // const formData = new FormData()\r\n        // formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'success_action_status\', 200)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'file\', file.file)\r\n        // return {\r\n        //   url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n        //   method: \'POST\',\r\n        //   data: formData,\r\n        //   headers: {\r\n        //     Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n        //     \'Content-Type\': \'multipart/form-data;\'\r\n        //   },\r\n        // }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 06:52:57', '2022-12-12 06:52:57', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('40a4dbb0-0bc6-42f1-84be-f33797d581b4', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": [\'v4\', \'v5\']\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": [\'v5\', \'v4\']\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:50:12', '2022-12-12 05:50:12', '1.0.2', '1.0.2', '调整两个版本的顺序');
INSERT INTO `bucketsourcehistory` VALUES ('44a9736f-58c5-4195-adbc-9e51d391fbe4', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'/${config.path}\' + file.filename,\r\n          date: date,\r\n          policy: \'\',\r\n          // contentMd5: this.md5()\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        console.log(sign)\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'/${config.path}\' + file.filename,\r\n          date: date,\r\n          policy: \'\',\r\n          contentMd5: md5\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 07:52:49', '2022-12-14 07:52:49', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('455e456d-5d60-4b95-8e47-0af7810258c3', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'${config.commit_messages}\'\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'${config.commit_messages}\'\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 07:01:08', '2022-12-09 07:01:08', '1.0.1', '1.0.0', '更新版本号');
INSERT INTO `bucketsourcehistory` VALUES ('46805e41-2688-497b-bd3e-8db4ca16237e', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        console.log(sign)\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'/${config.path}\' + file.filename,\r\n          date: date,\r\n          policy: \'\',\r\n          contentMd5: md5\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'picture-demo/2015.png\',\r\n          date: date,\r\n          policy: \'\',\r\n          contentMd5: \'asdas24ass1d2a4sd\'\r\n        })\r\n        console.log(sign)\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 07:47:35', '2022-12-14 07:47:35', '1.0.3', '1.0.3', '11');
INSERT INTO `bucketsourcehistory` VALUES ('48736821-4726-4d18-baea-7f9eae284cae', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = {}\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n        // const res = await this.beforeEach(file)\r\n        // const formData = new FormData()\r\n        // formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'success_action_status\', 200)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'file\', file.file)\r\n        // return {\r\n        //   url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n        //   method: \'POST\',\r\n        //   data: formData,\r\n        //   headers: {\r\n        //     Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n        //     \'Content-Type\': \'multipart/form-data;\'\r\n        //   },\r\n        // }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = {}\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n        // const res = await this.beforeEach(file)\r\n        // const formData = new FormData()\r\n        // formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'success_action_status\', 200)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'file\', file.file)\r\n        // return {\r\n        //   url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n        //   method: \'POST\',\r\n        //   data: formData,\r\n        //   headers: {\r\n        //     Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n        //     \'Content-Type\': \'multipart/form-data;\'\r\n        //   },\r\n        // }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 06:51:40', '2022-12-12 06:51:40', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('4ab7912d-0165-43b0-ac29-84685e6f5501', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = this.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 02:28:26', '2022-12-13 02:28:26', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('4c68c7ad-c116-4db0-9d7d-61331415b8a9', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = {}\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n        // const res = await this.beforeEach(file)\r\n        // const formData = new FormData()\r\n        // formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'success_action_status\', 200)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'file\', file.file)\r\n        // return {\r\n        //   url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n        //   method: \'POST\',\r\n        //   data: formData,\r\n        //   headers: {\r\n        //     Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n        //     \'Content-Type\': \'multipart/form-data;\'\r\n        //   },\r\n        // }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        console.log(suffix, version)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = {}\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              contentType: mimeTypes[suffix]\r\n            },\r\n            body: \'asdasdasd\',\r\n            resolveWithFullResponse: true\r\n          }\r\n        }\r\n        // const res = await this.beforeEach(file)\r\n        // const formData = new FormData()\r\n        // formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'success_action_status\', 200)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'file\', file.file)\r\n        // return {\r\n        //   url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n        //   method: \'POST\',\r\n        //   data: formData,\r\n        //   headers: {\r\n        //     Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n        //     \'Content-Type\': \'multipart/form-data;\'\r\n        //   },\r\n        // }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 06:47:54', '2022-12-12 06:47:54', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('4fa9854c-c823-437d-bd7f-96da0f387218', '841ef04a-2ad2-451a-993b-6002db343a5b', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\r\n    config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定AccessKey\",\r\n        \"field\":\"accessKey\",\r\n        \"default\":\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定存储空间名\",\r\n        \"field\":\"bucket_name\",\r\n        \"default\":\"yaju\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定访问网址\",\r\n        \"field\":\"domain\",\r\n        \"default\":\"https://imgs.itchenliang.club/\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入访问网址\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"设定存储区域\",\r\n        \"field\":\"area\",\r\n        \"default\":\"qiniu.region.z0\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"options\": [\r\n          {\r\n            \"label\": \"华东区域\",\r\n            \"value\": \"qiniu.region.z0\"\r\n          },\r\n          {\r\n            \"label\": \"华北区域\",\r\n            \"value\": \"qiniu.region.z1\"\r\n          },\r\n          {\r\n            \"label\": \"华南区域\",\r\n            \"value\": \"qiniu.region.z2\"\r\n          },\r\n          {\r\n            \"label\": \"北美区域\",\r\n            \"value\": \"qiniu.region.na0\"\r\n          },\r\n          {\r\n            \"label\": \"新加坡区域\",\r\n            \"value\": \"qiniu.region.as0\"\r\n          }\r\n        ],\r\n        \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"指定存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"picture-ped-img/\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"${config.domain}\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定AccessKey\",\r\n        \"field\":\"accessKey\",\r\n        \"default\":\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定存储空间名\",\r\n        \"field\":\"bucket_name\",\r\n        \"default\":\"yaju\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定访问网址\",\r\n        \"field\":\"domain\",\r\n        \"default\":\"https://imgs.itchenliang.club/\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入访问网址\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"设定存储区域\",\r\n        \"field\":\"area\",\r\n        \"default\":\"qiniu.region.z0\",\r\n        \"required\":true,\r\n        \"hidden\": true,\r\n        \"options\": [\r\n          {\r\n            \"label\": \"华东区域\",\r\n            \"value\": \"qiniu.region.z0\"\r\n          },\r\n          {\r\n            \"label\": \"华北区域\",\r\n            \"value\": \"qiniu.region.z1\"\r\n          },\r\n          {\r\n            \"label\": \"华南区域\",\r\n            \"value\": \"qiniu.region.z2\"\r\n          },\r\n          {\r\n            \"label\": \"北美区域\",\r\n            \"value\": \"qiniu.region.na0\"\r\n          },\r\n          {\r\n            \"label\": \"新加坡区域\",\r\n            \"value\": \"qiniu.region.as0\"\r\n          }\r\n        ],\r\n        \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"指定存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"picture-ped-img/\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"${config.domain}\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-02-23 05:23:12', '2023-02-23 05:23:12', '1.0.1', '1.0.0', '新增文档地址');
INSERT INTO `bucketsourcehistory` VALUES ('5429c55a-7e6e-4695-9f82-e7a7ebd3d2eb', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = this.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 02:27:34', '2022-12-13 02:27:34', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('57f4db50-c322-4ec2-ab7a-88b0901d7fe3', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 10:00:56', '2022-12-13 10:00:56', '1.0.3', '1.0.2', '修改后台环境地址');
INSERT INTO `bucketsourcehistory` VALUES ('5975e917-72ae-4559-bc68-852797a7a5f5', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        console.log(signature.toString())\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy)\r\n        console.log(signature)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:57:25', '2022-12-14 09:57:25', '1.0.2', '1.0.2', '11');
INSERT INTO `bucketsourcehistory` VALUES ('59a559a9-cb1c-47c9-b485-222703bf67ea', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      getSuffix: function (file) {\r\n        return \'png\'\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: function (file) {\r\n        // 获取signature\r\n        const date = new Date().toUTCString()\r\n        const mimeType = mimeTypes[this.getSuffix(file)]\r\n        const signString = \'PUT\\n\\n\' + mimeType + \'\\n\' + date + \'\\n/${config.bucket}/${config.path}\' + file.filename\r\n        const signature = this.crypto.createHmac(\'sha1\', \'${config.accessKeySecret}\').update(signString).digest(\'base64\')\r\n        return \'OSS ${config.accessKeyId}:\' + signature\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/${encodeURI(options.path)}${encodeURI(fileName)}\',\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: this.beforeEach(file),\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': this.getSuffix(file)\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/${encodeURI(options.path)}${encodeURI(fileName)}\',\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mime.lookup(fileName)\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 01:49:10', '2022-12-12 01:49:10', '1.0.3', '1.0.2', '完成request请求配置');
INSERT INTO `bucketsourcehistory` VALUES ('5b04ceb8-0ad3-43e5-a97b-02f7160231af', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          method: \'post\',\r\n          url: \'http://124.222.54.192/api/v1/tool/aliSign\',\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: this.beforeEach(file),\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      getSuffix: function (file) {\r\n        return \'png\'\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: function (file) {\r\n        // 获取signature\r\n        const date = new Date().toUTCString()\r\n        const mimeType = mimeTypes[this.getSuffix(file)]\r\n        const signString = \'PUT\\n\\n\' + mimeType + \'\\n\' + date + \'\\n/${config.bucket}/${config.path}\' + file.filename\r\n        const signature = this.crypto.createHmac(\'sha1\', \'${config.accessKeySecret}\').update(signString).digest(\'base64\')\r\n        console.log(signature)\r\n        return \'OSS ${config.accessKeyId}:\' + signature\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: this.beforeEach(file),\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': this.getSuffix(file)\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 03:18:20', '2022-12-12 03:18:20', '1.0.4', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('5b5432aa-fb31-4dfb-a42b-5f54484106a1', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'User-Agent\': UserAgent,\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'charset\', \'UTF-8\')\r\n        formData.append(\'Upload\', \'Upload to QingStor\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-19 06:21:35', '2022-12-19 06:21:35', '1.0.3', '1.0.3', '123');
INSERT INTO `bucketsourcehistory` VALUES ('5c80d1e8-562f-4e9d-a975-45bfdb4be304', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = useGetSuffix(file.filename)\r\n        console.log(suffix, version)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = {}\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              contentType: mimeTypes[suffix]\r\n            },\r\n            body: \'asdasdasd\',\r\n            resolveWithFullResponse: true\r\n          }\r\n        }\r\n        // const res = await this.beforeEach(file)\r\n        // const formData = new FormData()\r\n        // formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'success_action_status\', 200)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'file\', file.file)\r\n        // return {\r\n        //   url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n        //   method: \'POST\',\r\n        //   data: formData,\r\n        //   headers: {\r\n        //     Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n        //     \'Content-Type\': \'multipart/form-data;\'\r\n        //   },\r\n        // }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 06:30:49', '2022-12-12 06:30:49', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('5d5849f9-49cc-4375-a1e8-d8761c7c6757', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 03:01:34', '2022-12-13 03:01:34', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('5f178ca8-21cb-4833-a569-069cdd4d5ea8', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 06:00:25', '2022-12-12 06:00:25', '1.0.2', '1.0.2', '啊啊');
INSERT INTO `bucketsourcehistory` VALUES ('64a011dc-154e-4d87-a1e2-2e72f8d3a687', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#github--jsdelivr\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            // \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}@${config.branch}/\",\r\n            \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            // \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}@${config.branch}/\",\r\n            \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-02-23 05:33:22', '2023-02-23 05:33:22', '1.0.5', '1.0.4', '添加文档地址');
INSERT INTO `bucketsourcehistory` VALUES ('66173851-9bda-454a-aecd-cdcd34a82d22', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 10:00:08', '2022-12-13 10:00:08', '1.0.3', '1.0.2', '修改后台环境地址');
INSERT INTO `bucketsourcehistory` VALUES ('66fcf944-fac0-4212-adf4-0342954b4380', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.hmacsha1(\'${config.secret_access_key}\', policy)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"username\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function () {\r\n				const json = {\r\n          \"key\": \"\"\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n				return {\r\n					url: \"\",\r\n					method: \"\",\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:40:52', '2022-12-14 09:40:52', '1.0.2', '1.0.1', '完善request');
INSERT INTO `bucketsourcehistory` VALUES ('6f177694-d247-445e-a867-1b345cd46300', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": [\r\n            { label: \'v5\', value: \'v5\', active: true },\r\n            { label: \'v4\', value: \'v4\', active: false }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:56:28', '2022-12-12 05:56:28', '1.0.2', '1.0.2', '调整choices的类型定义');
INSERT INTO `bucketsourcehistory` VALUES ('73f38179-f5f5-4a5b-80ab-177063363307', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        // const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          const formData = new FormData()\r\n          formData.append(\'key\', \'${config.path}\' + file.filename)\r\n          formData.append(\'file\', file.file)\r\n          return {\r\n            method: \'POST\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/\',\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: signature.signature,\r\n              // \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: formData\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        // const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          const formData = new FormData()\r\n          formData.append(\'key\', \'${config.path}\' + file.filename)\r\n          formData.append(\'file\', file.file)\r\n          return {\r\n            method: \'POST\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/\',\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              // \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: formData\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 07:40:27', '2022-12-12 07:40:27', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('797af0d7-05a4-4f7c-bfa5-b6ea49ed48c0', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename,\r\n            base64: await this.useFileToBase64(file.file, true)\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            // signature.base64\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename,\r\n            base64: await this.useFileToBase64(file.file, true)\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: signature.base64\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 08:45:58', '2022-12-12 08:45:58', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('7ad50d1e-d3fb-452d-9977-0f774d4de12e', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy)\r\n        console.log(signature)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = window.btoa(this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy))\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:53:25', '2022-12-14 09:53:25', '1.0.2', '1.0.2', '12');
INSERT INTO `bucketsourcehistory` VALUES ('7c6f31bf-2bf6-4420-ae43-b6db184c79e8', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        console.log(tmp)\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          console.log(keys)\r\n          if (keys[0] === \'file\') {\r\n            console.log(file[keys[1]])\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 10:03:42', '2022-12-09 10:03:42', '1.0.3', '1.0.3', '解决const报错问题');
INSERT INTO `bucketsourcehistory` VALUES ('7dc435a4-80ec-42bc-9bba-b0bfda793610', 'f4fe0250-e404-4b27-891e-49d2b67e5e3e', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"optios\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${filename} by pic bed\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"optios\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${filename} by pic bed\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '2022-12-10 06:35:11', '2022-12-10 06:35:11', '1.0.1', '1.0.1', '啊啊');
INSERT INTO `bucketsourcehistory` VALUES ('820e8bc9-b31a-460f-97e2-8cb5fe17292d', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}@${config.branch}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/${config.branch}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 14:27:32', '2022-12-09 14:27:32', '1.0.4', '1.0.4', '啊啊');
INSERT INTO `bucketsourcehistory` VALUES ('85f591fe-27a7-49d9-bb2e-4e3638e6fbd8', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        console.log(tmp)\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          console.log(keys)\r\n          if (keys[0] === \'file\') {\r\n            console.log(file[keys[1]])\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        console.log(tmp)\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          console.log(keys)\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 10:02:56', '2022-12-09 10:02:56', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('868d0e73-6dd2-42de-9d6a-861126f55d98', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = window.btoa(this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy))\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:52:40', '2022-12-14 09:52:40', '1.0.2', '1.0.2', '11');
INSERT INTO `bucketsourcehistory` VALUES ('879b5e10-8f1b-4a5f-b5ce-2edc7a3147d5', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        // const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data.signature\r\n          const formData = new FormData()\r\n          formData.append(\'key\', \'${config.path}\' + file.filename)\r\n          formData.append(\'file\', file.file)\r\n          const arr = signature.split(\'&\')\r\n          arr.forEach(item => {\r\n            const keys = item.split(\'=\')\r\n            formData.append(keys[0], keys[1])\r\n          })\r\n          return {\r\n            method: \'POST\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/\',\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: signature,\r\n              // \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: formData\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        // const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          const formData = new FormData()\r\n          formData.append(\'key\', \'${config.path}\' + file.filename)\r\n          formData.append(\'file\', file.file)\r\n          return {\r\n            method: \'POST\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/\',\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: signature.signature,\r\n              // \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: formData\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 07:49:57', '2022-12-12 07:49:57', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('88edaa1c-9bf5-4098-ad84-01f8d5e3ee1d', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 07:04:31', '2022-12-12 07:04:31', '1.0.2', '1.0.2', '啊啊');
INSERT INTO `bucketsourcehistory` VALUES ('902b1c61-11f0-494f-b39e-f6d206c596ef', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename,\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 04:57:46', '2022-12-12 04:57:46', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('908c18ce-6953-4f98-816b-b88ece97b0e4', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"username\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function () {\r\n				const json = {\r\n          \"key\": \"\"\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n				return {\r\n					url: \"\",\r\n					method: \"\",\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"username\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function () {\r\n				\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n				return {\r\n					url: \"\",\r\n					method: \"\",\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:32:04', '2022-12-14 09:32:04', '1.0.1', '1.0.1', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('91abec3f-91d2-42b8-b12f-e440b1de0ee2', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'picture-demo/2015.png\',\r\n          date: date,\r\n          policy: \'\',\r\n          contentMd5: \'asdas24ass1d2a4sd\'\r\n        })\r\n        console.log(sign)\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const {method, path} = options\r\n        const data = [method, path]\r\n        [\'date\', \'policy\', \'contentMd5\'].forEach(item => {\r\n          if (options[item]) {\r\n            data.push(options[item])\r\n          }\r\n        })\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'picture-demo/2015.png\',\r\n          date: date,\r\n          policy: \'\',\r\n          contentMd5: \'asdas24ass1d2a4sd\'\r\n        })\r\n        console.log(sign)\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 07:42:34', '2022-12-14 07:42:34', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('92875bc8-7f79-4c85-90a8-3380b2089510', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        console.log(json)\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        // const policy = window.btoa(json)\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        console.log(signature.toString())\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-19 03:01:53', '2022-12-19 03:01:53', '1.0.3', '1.0.2', '111');
INSERT INTO `bucketsourcehistory` VALUES ('95267508-26d6-47f1-965d-c625b2cf2a91', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 10:00:34', '2022-12-13 10:00:34', '1.0.6', '1.0.5', '修改后台环境地址');
INSERT INTO `bucketsourcehistory` VALUES ('9e070f9b-c494-44b1-847e-5dcabeb4bf50', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"username\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function () {\r\n				\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n				return {\r\n					url: \"\",\r\n					method: \"\",\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定用户名\",\r\n				\"field\":\"username\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入用户名\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function () {\r\n				\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n				return {\r\n					url: \"\",\r\n					method: \"\",\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:29:56', '2022-12-14 09:29:56', '1.0.1', '1.0.0', '配置config列表');
INSERT INTO `bucketsourcehistory` VALUES ('a2047c62-d439-4e7e-8212-366b76d07504', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        const policy = window.btoa(json)\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        console.log(signature.toString())\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        console.log(signature.toString())\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-19 02:39:32', '2022-12-19 02:39:32', '1.0.2', '1.0.2', '11');
INSERT INTO `bucketsourcehistory` VALUES ('a28f16af-e3d6-44e7-b432-46090aa0ac79', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + ffile.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 04:52:02', '2022-12-12 04:52:02', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('a86d89d9-0a19-47ce-a871-ee98dac1702c', 'f4fe0250-e404-4b27-891e-49d2b67e5e3e', '(() => {\r\n	return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#gitee\',\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库名称\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"password\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${file.filename} by pic bed\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${config.username}/${config.repo}/raw/${config.branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库名称\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"password\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${file.filename} by pic bed\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${config.username}/${config.repo}/raw/${config.branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '2023-02-23 05:30:07', '2023-02-23 05:30:07', '1.0.4', '1.0.3', '添加文档地址');
INSERT INTO `bucketsourcehistory` VALUES ('a99db820-61b8-40c9-99a9-65092b6dfb02', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        const operator = \'${config.operator}\'\r\n        const sign = this.hmacsha1(operator + \':\' + md5Pwd)\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = [\'PUT\']\r\n        data.push(options[\'path\'])\r\n        data.push(options[\'date\'])\r\n        // 签名\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        // const blobFile = new Blob([file.file], {\r\n        //   type: \'text/plain\'\r\n        // })\r\n        // const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:44:57', '2022-12-14 08:44:57', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('aa78fbdd-0641-4a20-b129-d78d9369e167', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '[{\"type\": \"string\", \"label\": \"AppID\", \"value\": \"appId\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入leancloud的appid\"}, {\"type\": \"string\", \"label\": \"appkey\", \"value\": \"appkey\", \"default\": \"123\", \"required\": false, \"placeholder\": \"请输入leancloud的appid\"}, {\"type\": \"string\", \"label\": \"访问前缀\", \"value\": \"baseUrl\", \"hidden\": true, \"default\": \"https://raw.githubusercontent.com/${username}/${repo}\", \"required\": false, \"placeholder\": \"请输入baseUrl\"}]', '2022-12-11 06:20:08', '2022-12-11 06:20:08', '1.0.1', '1.0.0', '更新插件的config配置');
INSERT INTO `bucketsourcehistory` VALUES ('abbd7615-4dab-4098-9f32-c2bcb6eda6d4', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '[{\"type\": \"string\", \"label\": \"AppID\", \"value\": \"appId\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入leancloud的appid\"}, {\"type\": \"string\", \"label\": \"appkey\", \"value\": \"appkey\", \"default\": \"123\", \"required\": false, \"placeholder\": \"请输入leancloud的appid\"}, {\"type\": \"string\", \"label\": \"访问前缀\", \"value\": \"baseUrl\", \"hidden\": true, \"default\": \"https://raw.githubusercontent.com/${username}/${repo}\", \"required\": false, \"placeholder\": \"请输入baseUrl\"}]', '2022-12-12 09:49:48', '2022-12-12 09:49:48', '1.0.0', '1.0.0', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('b01511e5-5ffa-44ff-a25f-809a65ea187e', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'User-Agent\': \'picgo_plugin_qingstor\',\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'User-Agent\': UserAgent,\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-19 06:22:15', '2022-12-19 06:22:15', '1.0.3', '1.0.3', '123');
INSERT INTO `bucketsourcehistory` VALUES ('b214f394-bb20-4161-848b-9e52131fdb5e', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file, true)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file, true)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 08:12:51', '2022-12-12 08:12:51', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('b2f4adaf-6f80-4884-b623-4aeac3fcdece', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        console.log(\'${config.operator}:${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:50:04', '2022-12-14 08:50:04', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('b5ca4f59-01db-4aea-9c49-f5a4c977626d', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename,\r\n            base64: await this.useFileToBase64(file.file)\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: signature.base64\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          const content = await this.useFileToBase64(file.file)\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: window.btoa(encodeURI(content))\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 08:41:04', '2022-12-12 08:41:04', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('b82b76f5-79ac-4e39-b31c-d022fab7fa60', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file, true)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 08:09:17', '2022-12-12 08:09:17', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('b910f85c-c09f-4e92-8568-e97b99be12cc', 'f4fe0250-e404-4b27-891e-49d2b67e5e3e', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"optios\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${filename} by pic bed\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"optios\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${filename} by pic bed\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function () {\r\n				\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n				return {\r\n					url: \"\",\r\n					method: \"\",\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-10 06:32:21', '2022-12-10 06:32:21', '1.0.1', '1.0.0', '完善request请求配置');
INSERT INTO `bucketsourcehistory` VALUES ('bc38d61a-8205-4a2a-b1da-272f5f81c342', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#腾讯云-cos\',\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-02-23 05:32:26', '2023-02-23 05:32:26', '1.0.4', '1.0.3', '添加文档地址');
INSERT INTO `bucketsourcehistory` VALUES ('c034bc4d-fd4c-4c6b-be60-3bd928ecc9cd', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'${config.commit_messages}\'\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'${config.commit_messages}\'\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 08:33:21', '2022-12-09 08:33:21', '1.0.2', '1.0.1', '更新版本：添加request返回说明');
INSERT INTO `bucketsourcehistory` VALUES ('c173c245-c608-4aa2-abb8-e4fa9a21cc18', 'f4fe0250-e404-4b27-891e-49d2b67e5e3e', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库名称\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"password\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${file.filename} by pic bed\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${config.username}/${config.repo}/raw/${config.branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"option\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"options\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${file.filename} by pic bed\",\r\n        \"required\":false,\r\n        \"hidden\": true,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${config.username}/${config.repo}/raw/${config.branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://gitee.com/api/v5/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        const formData = new FormData()\r\n        formData.append(\'branch\', \'${config.branch}\')\r\n        formData.append(\'content\', content)\r\n        formData.append(\'access_token\', \'${config.token}\')\r\n        formData.append(\'message\', tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n		}\r\n	}\r\n})()', '2023-02-23 05:03:59', '2023-02-23 05:03:59', '1.0.3', '1.0.2', '修改仓库地址为仓库名称，以及私人令牌类型改为password');
INSERT INTO `bucketsourcehistory` VALUES ('c17d9aee-4299-49e5-8c7b-9dad096fdf59', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.hmacsha1(\'${config.secret_access_key}\', policy)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.hmacsha1(\'${config.secret_access_key}\', policy)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:44:52', '2022-12-14 09:44:52', '1.0.2', '1.0.2', '11');
INSERT INTO `bucketsourcehistory` VALUES ('c1c7949d-1893-4931-a1e1-c3ebc5910c70', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/${encodeURI(options.path)}${encodeURI(fileName)}\',\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mime.lookup(fileName)\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 01:42:08', '2022-12-12 01:42:08', '1.0.2', '1.0.2', 'aaa');
INSERT INTO `bucketsourcehistory` VALUES ('c34d6697-5252-4979-a4a4-d4ef2576107f', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: \'123asd4as2dasd\',\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'image/png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: \'123asd4as2dasd\',\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${options.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'image/png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 03:30:41', '2022-12-12 03:30:41', '1.0.4', '1.0.4', 'ss');
INSERT INTO `bucketsourcehistory` VALUES ('c45fd4c6-c862-4bd1-bc52-a8a72bda527b', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const {method, path} = options\r\n        const data = [method, path]\r\n        [\'date\', \'policy\', \'contentMd5\'].forEach(item => {\r\n          if (options[item]) {\r\n            data.push(options[item])\r\n          }\r\n        })\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'picture-demo/2015.png\',\r\n          date: date,\r\n          policy: \'\',\r\n          contentMd5: \'asdas24ass1d2a4sd\'\r\n        })\r\n        console.log(sign)\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        const res = await this.beforeEach(file, md5)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 07:37:51', '2022-12-14 07:37:51', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('ca032f8a-d74e-4863-8d32-5a217e6d796d', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        console.log(json)\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        // const policy = window.btoa(json)\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        console.log(signature.toString())\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        const policy = window.btoa(json)\r\n        const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        console.log(signature.toString())\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n        formData.append(\'file\', file.file)\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-19 02:41:54', '2022-12-19 02:41:54', '1.0.2', '1.0.2', '12');
INSERT INTO `bucketsourcehistory` VALUES ('cac206d4-6e5b-4979-bab5-2eaa537fe37a', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 07:07:44', '2022-12-12 07:07:44', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('cb09f08f-fae2-4ddf-9d95-a6bdd76782e1', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.hmacsha1(\'${config.secret_access_key}\', policy)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				const json = {\r\n          \"key\": \"${config.path}\" + file.filename,\r\n          \"redirect\": \"${config.redirect}\"\r\n        }\r\n        const policy = window.btoa(JSON.stringify(json))\r\n        const signature = this.hmacsha1(\'${config.secret_access_key}\', policy)\r\n        return {\r\n          signature,\r\n          policy\r\n        }\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'policy\', res.policy)\r\n        formData.append(\'signature\', res.signature)\r\n        formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        formData.append(\'redirect\', \'${config.redirect}\')\r\n				return {\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com\",\r\n					method: \"POST\",\r\n          data: formData\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-14 09:43:33', '2022-12-14 09:43:33', '1.0.2', '1.0.2', '11');
INSERT INTO `bucketsourcehistory` VALUES ('cd540671-a9b8-47ae-8aa4-113308245101', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new this.sparkMd5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        spark.append(arrayBufferData)\r\n        const md5 = spark.end()\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\',\r\n            \'Content-MD5\': md5\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 02:29:00', '2022-12-13 02:29:00', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('d1fe30e8-5fc1-4ed7-82fc-c5b5e6a43afb', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: await this.fileToBase64(file.file),\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'image/png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: \'123asd4as2dasd\',\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'image/png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 03:36:46', '2022-12-12 03:36:46', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('d2184f40-b470-4855-994d-f20ab258bd1e', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        // const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          const formData = new FormData()\r\n          formData.append(\'key\', \'${config.path}\' + file.filename)\r\n          formData.append(\'file\', file.file)\r\n          return {\r\n            method: \'POST\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/\',\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              // \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: formData\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: await this.useFileToBase64(file.file, true)\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 07:22:29', '2022-12-12 07:22:29', '1.0.2', '1.0.2', '改成post');
INSERT INTO `bucketsourcehistory` VALUES ('d52d6997-3365-4df6-8804-d8cf5481d104', '9449c07e-514a-456f-a781-31e2c06f3af1', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#七牛云-kodo\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AccessKey\",\r\n          \"field\":\"accessKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"password\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket_name\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入自定义域名\",\r\n          \"tips\": \"以http://或https://开头，末尾无需斜杠\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"设定存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"qiniu.region.z0\",\r\n          \"required\":true,\r\n          \"options\": [\r\n            {\r\n              \"label\": \"华东区域\",\r\n              \"value\": \"qiniu.region.z0\"\r\n            },\r\n            {\r\n              \"label\": \"华北区域\",\r\n              \"value\": \"qiniu.region.z1\"\r\n            },\r\n            {\r\n              \"label\": \"华南区域\",\r\n              \"value\": \"qiniu.region.z2\"\r\n            },\r\n            {\r\n              \"label\": \"北美区域\",\r\n              \"value\": \"qiniu.region.na0\"\r\n            },\r\n            {\r\n              \"label\": \"新加坡区域\",\r\n              \"value\": \"qiniu.region.as0\"\r\n            }\r\n          ],\r\n          \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定网址后缀\",\r\n          \"field\":\"suffix\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"访问前缀\",\r\n          \"field\":\"baseUrl\",\r\n          \"hidden\":true,\r\n          \"default\":\"${config.domain}\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AccessKey\",\r\n          \"field\":\"accessKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"password\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket_name\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入自定义域名\",\r\n          \"tips\": \"以http://或https://开头，末尾无需斜杠\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"设定存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"qiniu.region.z0\",\r\n          \"required\":true,\r\n          \"options\": [\r\n            {\r\n              \"label\": \"华东区域\",\r\n              \"value\": \"qiniu.region.z0\"\r\n            },\r\n            {\r\n              \"label\": \"华北区域\",\r\n              \"value\": \"qiniu.region.z1\"\r\n            },\r\n            {\r\n              \"label\": \"华南区域\",\r\n              \"value\": \"qiniu.region.z2\"\r\n            },\r\n            {\r\n              \"label\": \"北美区域\",\r\n              \"value\": \"qiniu.region.na0\"\r\n            },\r\n            {\r\n              \"label\": \"新加坡区域\",\r\n              \"value\": \"qiniu.region.as0\"\r\n            }\r\n          ],\r\n          \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定网址后缀\",\r\n          \"field\":\"suffix\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"访问前缀\",\r\n          \"field\":\"baseUrl\",\r\n          \"hidden\":true,\r\n          \"default\":\"${config.domain}\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-02-23 05:31:30', '2023-02-23 05:31:30', '1.0.3', '1.0.2', '添加文档地址');
INSERT INTO `bucketsourcehistory` VALUES ('d574be5c-e1ee-4218-afda-e7e786b1b7d6', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        console.log(tmp)\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        console.log(tmp)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 10:01:07', '2022-12-09 10:01:07', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('d70bf287-44e0-4de4-8108-e8d623cf63f8', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = [\'PUT\']\r\n        data.push(options[\'path\'])\r\n        data.push(options[\'date\'])\r\n        console.log(data)\r\n        // 签名\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        console.log(md5Pwd)\r\n        const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date,\r\n          policy: \'\',\r\n          // contentMd5: this.md5()\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:05:33', '2022-12-14 08:05:33', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('d761897f-23cf-473e-9afd-4950024c9276', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename,\r\n            base64: await this.useFileToBase64(file.file, true)\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: signature.base64\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename,\r\n            base64: await this.useFileToBase64(file.file)\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: signature.base64\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 08:42:52', '2022-12-12 08:42:52', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('d94c1926-c272-4ce3-84c8-5c3de5272c2b', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/${config.branch}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 14:26:29', '2022-12-09 14:26:29', '1.0.4', '1.0.3', '更新插件地址配置');
INSERT INTO `bucketsourcehistory` VALUES ('d9ca8314-9707-41f3-ab26-c7b3fa455fd8', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(this.mime.lookup(file.filename))\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: \'123asd4as2dasd\',\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${options.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'image/png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(this.mime.lookup(file.filename))\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${options.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 03:27:14', '2022-12-12 03:27:14', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('dafc4f0c-c905-447a-8f6e-a729882fdbe0', '1c471b96-6ddd-454e-97f1-7414ca122008', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n          // ${url.protocol}://${options.zone}.${url.host}/${options.bucket}${path}/${encodeURI(fileName)}\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com/${config.path}\" + file.filename,\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            // Date: new Date().toUTCString(),\r\n            \'X-QS-Date\': new Date((new Date().getTime() + 300000)).toUTCString(),\r\n            \'User-Agent\': \'picgo_plugin_qingstor\',\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n			{\r\n				\"type\":\"string\",\r\n				\"label\":\"设定空间名\",\r\n				\"field\":\"bucket\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入Bucket空间名\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定AccessKeyId\",\r\n				\"field\":\"access_key_id\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入access key id\"\r\n			},\r\n      {\r\n				\"type\":\"password\",\r\n				\"label\":\"设定AccessKey\",\r\n				\"field\":\"secret_access_key\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请输入AccessKey\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定区域\",\r\n				\"field\":\"area\",\r\n				\"default\":\"\",\r\n				\"required\":true,\r\n				\"placeholder\":\"请选择区域\",\r\n        \"options\": [\r\n          { label: \"北京3区-A\", value: \"pek3a\" },\r\n          { label: \"北京3区\", value: \"pek3b\" },\r\n          { label: \"上海1区\", value: \"sh1a\" },\r\n          { label: \"广东2区\", value: \"gd2\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"指定存储路径\",\r\n				\"field\":\"path\",\r\n				\"default\":\"\",\r\n				\"required\":false,\r\n				\"placeholder\":\"例如img/\"\r\n			},\r\n      {\r\n				\"type\":\"option\",\r\n				\"label\":\"设定存储级别\",\r\n				\"field\":\"storage_type\",\r\n				\"default\":\"STANDARD\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入用户名\",\r\n        \"options\": [\r\n          { label: \"标准存储\", value: \"STANDARD\" },\r\n          { label: \"低频存储\", value: \"STANDARD_IA\" }\r\n        ]\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定重定向\",\r\n				\"field\":\"redirect\",\r\n				\"default\":\"http://.com/callback\",\r\n				\"required\":false,\r\n				\"placeholder\":\"请输入重定向地址\"\r\n			},\r\n      {\r\n				\"type\":\"string\",\r\n				\"label\":\"设定基地址\",\r\n				\"field\":\"baseUrl\",\r\n				\"default\":\"https://${config.bucket}.${config.area}.qingstor.com/\",\r\n				\"required\":false,\r\n        \"hidden\": true,\r\n				\"placeholder\":\"请输入基地址\"\r\n			}\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function (file) {\r\n				// const json = {\r\n        //   \"key\": \"${config.path}\" + file.filename,\r\n        //   \"redirect\": \"${config.redirect}\"\r\n        // }\r\n        // console.log(json)\r\n        // const policy = window.btoa(JSON.stringify(json))\r\n        // // const policy = window.btoa(json)\r\n        // const signature = this.crypto.HmacSHA256(\'${config.secret_access_key}\', policy).toString()\r\n        // console.log(signature.toString())\r\n        // return {\r\n        //   signature,\r\n        //   policy\r\n        // }\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/qyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            access_key_id: \'${config.access_key_id}\',\r\n            secret_access_key: \'${config.secret_access_key}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            redirect: \'${config.redirect}\',\r\n            storage_type: \'${config.storage_type}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        // console.log(res)\r\n        // const formData = new FormData()\r\n        // formData.append(\'x-qs-storage-clas\', \'${config.storage_type}\')\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'access_key_id\', \'${config.access_key_id}\')\r\n        // formData.append(\'redirect\', \'${config.redirect}\')\r\n        // formData.append(\'charset\', \'UTF-8\')\r\n        // formData.append(\'Upload\', \'Upload to QingStor\')\r\n        // formData.append(\'file\', file.file)\r\n				return {\r\n          // ${url.protocol}://${options.zone}.${url.host}/${options.bucket}${path}/${encodeURI(fileName)}\r\n					url: \"http://${config.bucket}.${config.area}.qingstor.com/${config.path}\" + file.filename,\r\n					method: \"PUT\",\r\n          data: file.file,\r\n          headers: {\r\n            // Host: \'${config.area}.${config.host}\',\r\n            Authorization: res.data.data.signature,\r\n            // Date: new Date().toUTCString(),\r\n            Date: new Date((new Date().getTime() + 300000)).toUTCString(),\r\n            \'User-Agent\': \'picgo_plugin_qingstor\',\r\n            \'Content-Type\': \'application/octet-stream\',\r\n          }\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '2022-12-19 06:30:35', '2022-12-19 06:30:35', '1.0.4', '1.0.4', '123');
INSERT INTO `bucketsourcehistory` VALUES ('db44dcf5-1112-49f6-84a9-4fd106fd1d15', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:\' + md5Pwd)\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:54:15', '2022-12-14 08:54:15', '1.0.3', '1.0.3', '11');
INSERT INTO `bucketsourcehistory` VALUES ('dbed7163-0abd-4270-aa3f-8f6accb2d393', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: this.beforeEach(file),\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          method: \'post\',\r\n          url: \'http://124.222.54.192/api/v1/tool/aliSign\',\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(res)\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: {},\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: this.beforeEach(file),\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 03:21:28', '2022-12-12 03:21:28', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('dc548b90-d46a-45df-899a-ebf0d400ddde', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.cos.${config.area}.myqcloud.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      useFileToBase64: function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            console.log(reader.result)\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            reject(error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename,\r\n            base64: await this.useFileToBase64(file.file, true)\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            // signature.base64\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 08:48:26', '2022-12-12 08:48:26', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('dc6199be-12ac-4525-aaf4-d08fec93c930', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename,\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename,\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:00:40', '2022-12-12 05:00:40', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('dcf015dc-d710-4810-897e-9e5ae61aafb5', 'f4fe0250-e404-4b27-891e-49d2b67e5e3e', '(() => {\r\n	return {\r\n		// 用户视图能看见什么样的表单\r\n		config: [\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"用户名\",\r\n        \"field\":\"username\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入Gitee用户名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"仓库地址\",\r\n        \"field\":\"repo\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入仓库名\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"分支\",\r\n        \"field\":\"branch\",\r\n        \"default\":\"master\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入分支名称\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"私人令牌\",\r\n        \"field\":\"token\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入私人令牌\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"存储路径\",\r\n        \"field\":\"path\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入存储路径\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"自定义路径\",\r\n        \"field\":\"customPath\",\r\n        \"default\":\"default\",\r\n        \"required\":false,\r\n        \"optios\": [\r\n          { label: \"默认\", value: \"default\" },\r\n          { label: \"年\", value: \"year\" },\r\n          { label: \"年月\", value: \"year-month\" },\r\n          { label: \"年月日\", value: \"year-month-day\" }\r\n        ],\r\n        \"placeholder\":\"请选择自定义路径\"\r\n      },\r\n      {\r\n        \"tips\":\"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\",\r\n        \"type\":\"string\",\r\n        \"label\":\"提交内容\",\r\n        \"field\":\"commit_messages\",\r\n        \"default\":\"upload ${filename} by pic bed\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入提交内容\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"访问前缀\",\r\n        \"field\":\"baseUrl\",\r\n        \"hidden\":true,\r\n        \"default\":\"https://gitee.com/${username}/${repo}/raw/${branch}/\",\r\n        \"required\":false,\r\n        \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n		],\r\n		// 上传配置\r\n		uploader: {\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\r\n			beforeEach: async function () {\r\n				\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\r\n			request: async function (file) {\r\n				return {\r\n					url: \"\",\r\n					method: \"\",\r\n				}\r\n			},\r\n			// 注意：不要使用箭头函数，否则会改变this的指向\r\n			// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \"\", hash: \"\" }格式\r\n			response: function (res) {\r\n				return {\r\n					img_url: \"\",\r\n					hash: \"\"\r\n				}\r\n			}\r\n		}\r\n	}\r\n})()', '[{\"type\": \"string\", \"label\": \"用户名\", \"value\": \"username\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入Gitee用户名\"}, {\"type\": \"string\", \"label\": \"仓库地址\", \"value\": \"repo\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入仓库名\"}, {\"type\": \"string\", \"label\": \"分支\", \"value\": \"branch\", \"default\": \"master\", \"required\": true, \"placeholder\": \"请输入分支名称\"}, {\"type\": \"string\", \"label\": \"私人令牌\", \"value\": \"token\", \"default\": \"\", \"required\": true, \"placeholder\": \"请输入私人令牌\"}, {\"type\": \"string\", \"label\": \"存储路径\", \"value\": \"path\", \"default\": \"\", \"required\": false, \"placeholder\": \"请输入存储路径\"}, {\"type\": \"string\", \"label\": \"自定义路径\", \"value\": \"customPath\", \"default\": \"default\", \"required\": false, \"listOptions\": \"gitee_custompath\", \"placeholder\": \"请选择自定义路径\"}, {\"tips\": \"${filename} - 文件名占位符<br/>${createdAt} - 创建时间\", \"type\": \"string\", \"label\": \"提交内容\", \"value\": \"commit_messages\", \"default\": \"upload ${filename} by pic bed\", \"required\": false, \"placeholder\": \"请输入提交内容\"}, {\"type\": \"string\", \"label\": \"访问前缀\", \"value\": \"baseUrl\", \"hidden\": true, \"default\": \"https://gitee.com/${username}/${repo}/raw/${branch}/\", \"required\": false, \"placeholder\": \"请输入baseUrl\"}]', '2022-12-09 09:40:47', '2022-12-09 09:40:47', '1.0.0', '1.0.0', 'feat: 更新插件config用户表单内容');
INSERT INTO `bucketsourcehistory` VALUES ('de8a1aaa-d5ca-4467-8352-bd7795a55fe9', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename,\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename,\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:36:00', '2022-12-12 05:36:00', '1.0.5', '1.0.5', '新增自定义域名说明');
INSERT INTO `bucketsourcehistory` VALUES ('e025437f-2ed2-4f1d-a7d7-4af5d1a12e9f', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:\' + md5Pwd)\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        // const data = [\'PUT\']\r\n        // data.push(options[\'path\'])\r\n        // data.push(options[\'date\'])\r\n        // // 签名\r\n        // const md5Pwd = this.md5(\'${config.password}\')\r\n        // const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        // return \'UPYUN ${config.operator}:\' + sign\r\n\r\n        console.log(\'${config.operator}:${config.password}\')\r\n        const sign = window.btoa(\'${config.operator}:${config.password}\')\r\n        return sign\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const date = new Date().toUTCString()\r\n        const sign = this.getSign({\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: \'Basic \' + sign,\r\n            \'X-Date\': date,\r\n            Date: date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:50:56', '2022-12-14 08:50:56', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('e7803980-d066-4060-b7be-ab76660d597f', '9449c07e-514a-456f-a781-31e2c06f3af1', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AccessKey\",\r\n          \"field\":\"accessKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket_name\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入自定义域名\",\r\n          \"tips\": \"以http://或https://开头，末尾无需斜杠\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"设定存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"qiniu.region.z0\",\r\n          \"required\":true,\r\n          \"options\": [\r\n            {\r\n              \"label\": \"华东区域\",\r\n              \"value\": \"qiniu.region.z0\"\r\n            },\r\n            {\r\n              \"label\": \"华北区域\",\r\n              \"value\": \"qiniu.region.z1\"\r\n            },\r\n            {\r\n              \"label\": \"华南区域\",\r\n              \"value\": \"qiniu.region.z2\"\r\n            },\r\n            {\r\n              \"label\": \"北美区域\",\r\n              \"value\": \"qiniu.region.na0\"\r\n            },\r\n            {\r\n              \"label\": \"新加坡区域\",\r\n              \"value\": \"qiniu.region.as0\"\r\n            }\r\n          ],\r\n          \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定网址后缀\",\r\n          \"field\":\"suffix\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"访问前缀\",\r\n          \"field\":\"baseUrl\",\r\n          \"hidden\":true,\r\n          \"default\":\"${config.domain}\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AccessKey\",\r\n          \"field\":\"accessKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket_name\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定访问网址\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入访问网址\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"设定存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"qiniu.region.z0\",\r\n          \"required\":true,\r\n          \"options\": [\r\n            {\r\n              \"label\": \"华东区域\",\r\n              \"value\": \"qiniu.region.z0\"\r\n            },\r\n            {\r\n              \"label\": \"华北区域\",\r\n              \"value\": \"qiniu.region.z1\"\r\n            },\r\n            {\r\n              \"label\": \"华南区域\",\r\n              \"value\": \"qiniu.region.z2\"\r\n            },\r\n            {\r\n              \"label\": \"北美区域\",\r\n              \"value\": \"qiniu.region.na0\"\r\n            },\r\n            {\r\n              \"label\": \"新加坡区域\",\r\n              \"value\": \"qiniu.region.as0\"\r\n            }\r\n          ],\r\n          \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定网址后缀\",\r\n          \"field\":\"suffix\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"访问前缀\",\r\n          \"field\":\"baseUrl\",\r\n          \"hidden\":true,\r\n          \"default\":\"${config.domain}\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-02-23 03:39:05', '2023-02-23 03:39:05', '1.0.1', '1.0.0', '更改自定义域名描述');
INSERT INTO `bucketsourcehistory` VALUES ('ed73d09f-f863-46c9-b184-4fd98fdab3c1', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        const tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 09:59:27', '2022-12-09 09:59:27', '1.0.3', '1.0.2', '更新版本号');
INSERT INTO `bucketsourcehistory` VALUES ('eed6b89e-f87d-4c12-adc4-e8ed52299d31', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const md5Pwd = this.md5(\'${config.password}\')\r\n        const sign = this.hmacsha1(md5Pwd, data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'/${config.bucket}/${config.path}\' + file.filename,\r\n          date: date,\r\n          policy: \'\',\r\n          // contentMd5: this.md5()\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 获取签名\r\n      getSign: function (options) {\r\n        const data = []\r\n        for (let key in options) {\r\n          if (options[key]) {\r\n            data.push(options[key])\r\n          }\r\n        }\r\n        // 签名\r\n        const sign = this.hmacsha1(\'${config.password}\', data.join(\'&\'))\r\n        return \'UPYUN ${config.operator}:\' + sign\r\n      },\r\n      toBlob: function (base64Data) {\r\n        let byteString = base64Data\r\n        if (base64Data.split(\',\')[0].indexOf(\'base64\') >= 0) {\r\n          byteString = atob(base64Data.split(\',\')[1]) // base64 解码\r\n        } else {\r\n          byteString = unescape(base64Data.split(\',\')[1])\r\n        }\r\n        // 获取文件类型\r\n        const mimeString = base64Data.split(\';\')[0].split(\':\')[1] // mime类型\r\n        const uintArr = new Uint8Array(byteString.length) // 创建视图\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          uintArr[i] = byteString.charCodeAt(i)\r\n        }\r\n        // 生成blob\r\n        const blob = new Blob([uintArr], {\r\n          type: mimeString\r\n        })\r\n        // 使用 Blob 创建一个指向类型化数组的URL, URL.createObjectURL是new Blob文件的方法,可以生成一个普通的url,可以直接使用,比如用在img.src上\r\n        return blob\r\n      },\r\n      toDataURL: function (file) {\r\n        return new Promise(function (resolve, reject) {\r\n          // 准备上传\r\n          const reader = new FileReader()\r\n          reader.readAsDataURL(file)\r\n          reader.onloadend = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      toArrayBuffer: function (value) {\r\n        const self = this\r\n        return new Promise(function (resolve, reject) {\r\n          // base64转blob\r\n          const blob = self.toBlob(value)\r\n          // blob转arrayBuffer\r\n          const reader2 = new FileReader()\r\n          reader2.readAsArrayBuffer(blob)\r\n          reader2.onload = function (e) {\r\n            resolve(e.target.result)\r\n          }\r\n        })\r\n      },\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, md5) {\r\n        return await this.axios({url: \'http://124.222.54.192:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename,\r\n            md5: md5\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const blobFile = new Blob([file.file], {\r\n          type: \'text/plain\'\r\n        })\r\n        const arrayBufferData = await this.toArrayBuffer(await this.toDataURL(blobFile))\r\n        // const spark = new this.sparkMd5.ArrayBuffer()\r\n        // spark.append(arrayBufferData)\r\n        // const md5 = spark.end()\r\n        // const res = await this.beforeEach(file, md5)\r\n        // const signature = res.data.data\r\n        const date = new Date().toGMTString()\r\n        const sign = this.getSign({\r\n          method: \'PUT\',\r\n          path: \'/${config.path}\' + file.filename,\r\n          date: date,\r\n          policy: \'\',\r\n          // contentMd5: this.md5()\r\n        })\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: sign,\r\n            \'X-Date\': date,\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-14 08:01:43', '2022-12-14 08:01:43', '1.0.3', '1.0.3', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('ef449a33-b01c-4bbc-b321-dbd8066dca3b', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'${config.commit_messages}\'\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: \'${config.commit_messages}\'\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 07:07:02', '2022-12-09 07:07:02', '1.0.2', '1.0.1', '更新版本号');
INSERT INTO `bucketsourcehistory` VALUES ('f2f2bc96-87b1-4009-8bae-5abba70eca8c', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n          const keys = key.split(\'.\')\r\n          if (keys[0] === \'file\') {\r\n            return file[keys[1]]\r\n          }\r\n        })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-11 06:34:17', '2022-12-11 06:34:17', '1.0.2', '1.0.1', '新增成都区域');
INSERT INTO `bucketsourcehistory` VALUES ('f3527a10-80ec-4c26-a31d-f9c6754e46c3', '9449c07e-514a-456f-a781-31e2c06f3af1', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AccessKey\",\r\n          \"field\":\"accessKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"password\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket_name\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入自定义域名\",\r\n          \"tips\": \"以http://或https://开头，末尾无需斜杠\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"设定存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"qiniu.region.z0\",\r\n          \"required\":true,\r\n          \"options\": [\r\n            {\r\n              \"label\": \"华东区域\",\r\n              \"value\": \"qiniu.region.z0\"\r\n            },\r\n            {\r\n              \"label\": \"华北区域\",\r\n              \"value\": \"qiniu.region.z1\"\r\n            },\r\n            {\r\n              \"label\": \"华南区域\",\r\n              \"value\": \"qiniu.region.z2\"\r\n            },\r\n            {\r\n              \"label\": \"北美区域\",\r\n              \"value\": \"qiniu.region.na0\"\r\n            },\r\n            {\r\n              \"label\": \"新加坡区域\",\r\n              \"value\": \"qiniu.region.as0\"\r\n            }\r\n          ],\r\n          \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定网址后缀\",\r\n          \"field\":\"suffix\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"访问前缀\",\r\n          \"field\":\"baseUrl\",\r\n          \"hidden\":true,\r\n          \"default\":\"${config.domain}\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    version: \'1.0.0\',\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AccessKey\",\r\n          \"field\":\"accessKey\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入AccessKey\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"设定SecretKey\",\r\n        \"field\":\"secretKey\",\r\n        \"default\":\"\",\r\n        \"required\":true,\r\n        \"placeholder\":\"请输入SecretKey\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket_name\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入自定义域名\",\r\n          \"tips\": \"以http://或https://开头，末尾无需斜杠\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"设定存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"qiniu.region.z0\",\r\n          \"required\":true,\r\n          \"options\": [\r\n            {\r\n              \"label\": \"华东区域\",\r\n              \"value\": \"qiniu.region.z0\"\r\n            },\r\n            {\r\n              \"label\": \"华北区域\",\r\n              \"value\": \"qiniu.region.z1\"\r\n            },\r\n            {\r\n              \"label\": \"华南区域\",\r\n              \"value\": \"qiniu.region.z2\"\r\n            },\r\n            {\r\n              \"label\": \"北美区域\",\r\n              \"value\": \"qiniu.region.na0\"\r\n            },\r\n            {\r\n              \"label\": \"新加坡区域\",\r\n              \"value\": \"qiniu.region.as0\"\r\n            }\r\n          ],\r\n          \"placeholder\":\"请选择存储区域\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定网址后缀\",\r\n          \"field\":\"suffix\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如: img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"访问前缀\",\r\n          \"field\":\"baseUrl\",\r\n          \"hidden\":true,\r\n          \"default\":\"${config.domain}\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请输入baseUrl\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      beforeEach: async function (file) {\r\n        return await this.axios({\r\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKey: \'${config.accessKey}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket_name}\',\r\n            expires: 7200\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'file\', file.file)\r\n        formData.append(\'token\', res.data.data.token)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'fname\', file.filename)\r\n        return {\r\n          url: \'https://upload.qiniup.com/\',\r\n          method: \'post\',\r\n          data: formData\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data\r\n        return {\r\n          img_url: tmp.key,\r\n          hash: tmp.hash\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2023-02-23 04:12:47', '2023-02-23 04:12:47', '1.0.2', '1.0.1', '将secretey设为密码框');
INSERT INTO `bucketsourcehistory` VALUES ('f67ca46a-b465-4ab1-ae74-0cb7d95b3ec2', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: \'123asd4as2dasd\',\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${options.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'image/png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        console.log(this.mime.lookup(file.filename))\r\n        return {\r\n          url: \'https://${config.bucket}.${options.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'PUT\',\r\n          data: \'123asd4as2dasd\',\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            Authorization: \'OSS ${options.accessKeyId}:\' + res.data.data.token,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': \'image/png\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 03:29:40', '2022-12-12 03:29:40', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('f6f3f8ac-4b07-40d7-8f20-8de4729cefb8', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/upyunSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            operator: \'${config.operator}\',\r\n            password: \'${config.password}\',\r\n            bucket: \'${config.bucket}\',\r\n            domain: \'${config.domain}\',\r\n            path: \'${config.path}\',\r\n            suffix: \'${config.suffix}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-13 02:04:29', '2022-12-13 02:04:29', '1.0.2', '1.0.1', '完善request');
INSERT INTO `bucketsourcehistory` VALUES ('f70adeee-9bc0-4e93-bf86-dc303170e55a', '607eb9fe-5f38-4beb-86c0-84b4b97aeba1', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        console.log(suffix, version)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = {}\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              contentType: mimeTypes[suffix]\r\n            },\r\n            body: \'asdasdasd\',\r\n            resolveWithFullResponse: true\r\n          }\r\n        }\r\n        // const res = await this.beforeEach(file)\r\n        // const formData = new FormData()\r\n        // formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'success_action_status\', 200)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'file\', file.file)\r\n        // return {\r\n        //   url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n        //   method: \'POST\',\r\n        //   data: formData,\r\n        //   headers: {\r\n        //     Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n        //     \'Content-Type\': \'multipart/form-data;\'\r\n        //   },\r\n        // }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"choice\",\r\n          \"label\":\"COS版本\",\r\n          \"field\":\"version\",\r\n          \"default\":\"v5\",\r\n          \"required\":false,\r\n          \"placeholder\":\"请选择cos版本\",\r\n          \"choices\": {\r\n            active: {\r\n              label: \"v5\",\r\n              value: \"v5\"\r\n            },\r\n            inactive: {\r\n              label: \"v4\",\r\n              value: \"v4\"\r\n            }\r\n          }\r\n          // [\r\n          //   { label: \'v5\', value: \'v5\', active: true },\r\n          //   { label: \'v4\', value: \'v4\', active: false }\r\n          // ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定SecretId\",\r\n          \"field\":\"secretId \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定SecretKey \",\r\n          \"field\":\"secretKey \",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入secretKey \"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定AppID\",\r\n          \"field\":\"appId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如1234567890\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"南京\", value: \"ap-nanjing\" },\r\n            { label: \"成都\", value: \"ap-chengdu\" },\r\n            { label: \"北京\", value: \"ap-beijing\" },\r\n            { label: \"广州\", value: \"ap-guangzhou\" },\r\n            { label: \"上海\", value: \"ap-shanghai\" },\r\n            { label: \"重庆\", value: \"ap-chongqing\" },\r\n            { label: \"香港\", value: \"ap-hongkong\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\",\r\n          \"tips\": \"可以使用${config.xxx}即代表使用该配置中的某属性，例如:${config.bucket}-代表使用填写的存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = useGetSuffix(file.filename)\r\n        console.log(suffix, version)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = {}\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              contentType: mimeTypes[suffix]\r\n            },\r\n            body: \'asdasdasd\',\r\n            resolveWithFullResponse: true\r\n          }\r\n        }\r\n        // const res = await this.beforeEach(file)\r\n        // const formData = new FormData()\r\n        // formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        // formData.append(\'policy\', res.data.data.policy)\r\n        // formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        // formData.append(\'success_action_status\', 200)\r\n        // formData.append(\'signature\', res.data.data.signature)\r\n        // formData.append(\'file\', file.file)\r\n        // return {\r\n        //   url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n        //   method: \'POST\',\r\n        //   data: formData,\r\n        //   headers: {\r\n        //     Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n        //     \'Content-Type\': \'multipart/form-data;\'\r\n        //   },\r\n        // }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 06:31:32', '2022-12-12 06:31:32', '1.0.2', '1.0.2', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('f8ae5a0e-f68b-49c4-9e98-52d42a1b8aa9', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + ffile.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.accessKeyId}\')\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\' + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 04:51:27', '2022-12-12 04:51:27', '1.0.4', '1.0.4', 'aa');
INSERT INTO `bucketsourcehistory` VALUES ('fce1851f-b82c-4b27-9165-7f07d56be654', '2b25ef86-1b8a-4c7c-806c-b59a0d196ca8', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如?x-oss-process=xxx\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"domain\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename,\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  // mine-types类型列表\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定KeyId\",\r\n          \"field\":\"accessKeyId\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeyId\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定KeySecret\",\r\n          \"field\":\"accessKeySecret\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入KeySecret\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名(Bucket)\"\r\n      },\r\n      {\r\n          \"type\":\"option\",\r\n          \"label\":\"存储区域\",\r\n          \"field\":\"area\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储区域\",\r\n          \"options\": [\r\n            { label: \"华东1(杭州)\", value: \"oss-cn-hangzhou\" },\r\n            { label: \"华东2(上海)\", value: \"oss-cn-shanghai\" },\r\n            { label: \"华东5(南京)\", value: \"oss-cn-nanjing\" },\r\n            { label: \"华东6(福州)\", value: \"oss-cn-fuzhou\" },\r\n            { label: \"华北1(青岛)\", value: \"oss-cn-qingdao\" },\r\n            { label: \"华北2(北京)\", value: \"oss-cn-beijing\" },\r\n            { label: \"华北3(张家口)\", value: \"oss-cn-zhangjiakou\" },\r\n            { label: \"华北5(呼伦浩特)\", value: \"oss-cn-huhehaote\" },\r\n            { label: \"华北6(乌兰察布)\", value: \"oss-cn-wulanchabu\" },\r\n            { label: \"华南1(深圳)\", value: \"oss-cn-shenzhen\" },\r\n            { label: \"华南2(河源)\", value: \"oss-cn-heyuan\" },\r\n            { label: \"华南3(广州)\", value: \"oss-cn-guangzhou\" },\r\n            { label: \"西南1(成都)\", value: \"oss-cn-chengdu\" }\r\n          ]\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"https://${config.bucket}.${config.area}.aliyuncs.com/\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      fileToBase64: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/aliSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            accessKeyId: \'${config.accessKeyId}\',\r\n            accessKeySecret: \'${config.accessKeySecret}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const res = await this.beforeEach(file)\r\n        const formData = new FormData()\r\n        formData.append(\'OSSAccessKeyId\', \'${config.accessKeyId}\')\r\n        formData.append(\'policy\', res.data.data.policy)\r\n        formData.append(\'key\', \'${config.path}\' + file.filename)\r\n        formData.append(\'success_action_status\', 200)\r\n        formData.append(\'signature\', res.data.data.signature)\r\n        formData.append(\'file\', file.file)\r\n        return {\r\n          url: \'https://${config.bucket}.${config.area}.aliyuncs.com/\',\r\n          //  + encodeURI(\'${config.path}\') + encodeURI(file.filename),\r\n          method: \'POST\',\r\n          data: formData,\r\n          headers: {\r\n            Host: \'${config.bucket}.${config.area}.aliyuncs.com\',\r\n            // Authorization: \'OSS ${config.accessKeyId}:\' + res.data.data.token,\r\n            // Date: new Date().toUTCString(),\r\n            // \'Content-Type\': \'image/png\',\r\n            \'Content-Type\': \'multipart/form-data;\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename,\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 05:33:50', '2022-12-12 05:33:50', '1.0.5', '1.0.4', '添加网址后缀以及自定义域名');
INSERT INTO `bucketsourcehistory` VALUES ('fdd30462-f4fc-408e-a24e-40aadfe3c3c1', '6b668061-79f4-4dc7-9d0e-7eb7a9d21884', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        const signature = res.data.data\r\n        return {\r\n          method: \'PUT\',\r\n          url: \'https://v0.api.upyun.com/${config.bucket}/${config.path}\' + file.filename,\r\n          headers: {\r\n            Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n            Authorization: signature.signature,\r\n            Date: new Date().toUTCString(),\r\n            \'Content-Type\': mimeTypes[suffix] || \'application/octet-stream\'\r\n          },\r\n          data: file.file\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  const mimeTypes = {\r\n    gif: \'image/gif\',\r\n    jpeg: \'image/jpeg\',\r\n    jpg: \'image/jpeg\',\r\n    jp2: \'image/jp2\',\r\n    jpe: \'image/jpeg\',\r\n    png: \'image/png\',\r\n    webp: \'image/webp\',\r\n    ico: \'image/x-icon\',\r\n    tif: \'image/tiff\',\r\n    tiff: \'image/tiff\',\r\n    wbmp: \'image/vnd.wap.wbmp\',\r\n    jng: \'image/x-jng\',\r\n    bmp: \'image/x-ms-bmp\',\r\n    svg: \'image/svg+xml\',\r\n    svgz: \'image/svg+xml\',\r\n    cgm: \'image/cgm\',\r\n    djv: \'image/vnd.djvu\',\r\n    djvu: \'image/vnd.djvu\',\r\n    ief: \'image/ief\',\r\n    mac: \'image/x-macpaint\',\r\n    pct: \'image/pict\',\r\n  }\r\n  return {\r\n    config: [\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定存储空间名\",\r\n          \"field\":\"bucket\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入存储空间名\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定操作员\",\r\n          \"field\":\"operator\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员，例如: me\"\r\n      },\r\n      {\r\n          \"type\":\"password\",\r\n          \"label\":\"设定操作员密码\",\r\n          \"field\":\"password\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"请输入操作员密码\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定加速域名\",\r\n          \"field\":\"domain\",\r\n          \"default\":\"\",\r\n          \"required\":true,\r\n          \"placeholder\":\"例如http:/xxx.test.upcdn.net/\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"指定存储路径\",\r\n          \"field\":\"path\",\r\n          \"default\":\"\",\r\n          \"required\":false,\r\n          \"placeholder\":\"例如img/\"\r\n      },\r\n      {\r\n        \"type\":\"string\",\r\n        \"label\":\"网址后缀\",\r\n        \"field\":\"suffix\",\r\n        \"default\":\"\",\r\n        \"required\":false,\r\n        \"placeholder\":\"例如!imgslim\"\r\n      },\r\n      {\r\n          \"type\":\"string\",\r\n          \"label\":\"设定自定义域名\",\r\n          \"field\":\"baseUrl\",\r\n          \"default\": \"${config.domain}\",\r\n          \"required\":false,\r\n          \"hidden\": true,\r\n          \"placeholder\":\"例如https://xxxx.com\"\r\n      }\r\n    ],\r\n    uploader: {\r\n      useGetSuffix: function (filePath, identify = \'.\') {\r\n        // 获取以identify为标识符的位置\r\n        var index = filePath.lastIndexOf(identify);\r\n        // 获取后缀\r\n        var value = filePath.substr(index + 1);\r\n        return value;\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file) {\r\n        return await this.axios({url: \'http://127.0.0.1:3002/api/v1/tool/tencentSign\',\r\n          method: \"POST\",\r\n          headers: {\r\n            authorization: localStorage.getItem(\'token\')\r\n          },\r\n          data: {\r\n            version: \'${config.version}\',\r\n            secretId: \'${config.secretId}\',\r\n            secretKey: \'${config.secretKey}\',\r\n            bucket: \'${config.bucket}\',\r\n            path: \'${config.path}\',\r\n            area: \'${config.area}\',\r\n            filename: file.filename\r\n          }\r\n        })\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const version = \'${config.version}\'\r\n        const suffix = this.useGetSuffix(file.filename)\r\n        const res = await this.beforeEach(file)\r\n        if (version === \'v4\') {\r\n          \r\n        } else {\r\n          const signature = res.data.data\r\n          return {\r\n            method: \'PUT\',\r\n            url: \'http://${config.bucket}.cos.${config.area}.myqcloud.com/${config.path}\' + file.filename,\r\n            headers: {\r\n              Host: \'${config.bucket}.cos.${config.area}.myqcloud.com\',\r\n              Authorization: \'q-sign-algorithm=sha1&q-ak=${config.secretId}&q-sign-time=\' + signature.signTime + \'&q-key-time=\' + signature.signTime + \'&q-header-list=host&q-url-param-list=&q-signature=\' + signature.signature,\r\n              \'Content-Type\': mimeTypes[suffix]\r\n            },\r\n            data: file.file\r\n          }\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res, file) {\r\n        const tmp = res.data.content\r\n        return {\r\n          // img_url: tmp.path,\r\n          // hash: tmp.sha\r\n          img_url: \'${config.path}\' + file.filename + \'${config.suffix}\',\r\n          hash: \'${config.path}\' + file.filename\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-12 09:57:12', '2022-12-12 09:57:12', '1.0.1', '1.0.0', '配置request内容');
INSERT INTO `bucketsourcehistory` VALUES ('fea97222-0c11-4e4b-9870-10ffd01da5a8', 'f68dd625-c5ce-4ef2-a3ca-5a843baf76fa', '(() => {\r\n  return {\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}@${config.branch}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        // tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n        //   const keys = key.split(\'.\')\r\n        //   if (keys[0] === \'file\') {\r\n        //     return file[keys[1]]\r\n        //   }\r\n        // })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '(() => {\r\n  return {\r\n    config: [\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定用户名\",\r\n            \"field\":\"username\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github用户名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定仓库名\",\r\n            \"field\":\"repo\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"分支\",\r\n            \"field\":\"branch\",\r\n            \"default\":\"main\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github仓库分支名\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"私人令牌\",\r\n            \"field\":\"token\",\r\n            \"default\":\"\",\r\n            \"required\":true,\r\n            \"placeholder\":\"请输入github token\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"指定存储路径\",\r\n            \"field\":\"path\",\r\n            \"default\":\"\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如img/\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"设定自定义域名\",\r\n            \"field\":\"domain\",\r\n            \"default\":\"https://cdn.jsdelivr.net/gh/${config.username}/${config.repo}/\",\r\n            \"required\":false,\r\n            \"hidden\": true,\r\n            \"placeholder\":\"例如https://xxxx.com\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"提交说明\",\r\n            \"field\":\"commit_messages\",\r\n            \"default\":\"upload ${file.filename}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"例如 upload test\"\r\n        },\r\n        {\r\n            \"type\":\"string\",\r\n            \"label\":\"访问前缀\",\r\n            \"field\":\"baseUrl\",\r\n            \"hidden\":true,\r\n            // https://raw.githubusercontent.com/${config.username}/${config.repo}/${config.branch}/\r\n            \"default\":\"${config.domain}\",\r\n            \"required\":false,\r\n            \"placeholder\":\"请输入baseUrl\"\r\n        }\r\n    ],\r\n    uploader: {\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 前置操作：例如数据处理或者获取token等操作\r\n      beforeEach: async function (file, prefix = false) {\r\n        return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(file);\r\n          reader.onload = () => {\r\n            const result = reader.result\r\n            if (prefix) {\r\n              resolve(result)\r\n            } else {\r\n              resolve(result.split(\",\").pop())\r\n            }\r\n          };\r\n          reader.onerror = (error) => {\r\n            // reject(error)\r\n            console.log(\'123\', error)\r\n          };\r\n        });\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      // 需要返回axios的RequestConfig请求配置\r\n      request: async function (file) {\r\n        const baseUrl = \'https://api.github.com/repos/\'\r\n        const content = await this.beforeEach(file.file)\r\n        // 替换config中的commit_messages\r\n        let tmp = \'${config.commit_messages}\'\r\n        // tmp = tmp.replace(/\\$\\{((file).*?)\\}/g, (v, key) => {\r\n        //   const keys = key.split(\'.\')\r\n        //   if (keys[0] === \'file\') {\r\n        //     return file[keys[1]]\r\n        //   }\r\n        // })\r\n        return {\r\n          url: baseUrl + \'${config.username}/${config.repo}/contents/${config.path}\' + file.filename,\r\n          method: \'PUT\',\r\n          data: {\r\n            branch: \'${config.branch}\',\r\n            content,\r\n            message: tmp\r\n          },\r\n          headers: {\r\n            Authorization: \'token ${config.token}\',\r\n            Accept: \'application/vnd.github.v3+json\'\r\n          },\r\n        }\r\n      },\r\n      // 注意：不要使用箭头函数，否则会改变this的指向\r\n      response: function (res) {\r\n        const tmp = res.data.content\r\n        return {\r\n          img_url: tmp.path,\r\n          hash: tmp.sha\r\n        }\r\n      }\r\n    }\r\n  }\r\n})()', '2022-12-09 14:22:41', '2022-12-09 14:22:41', '1.0.4', '1.0.3', '更新domain生成规则，添加@branch配置');

-- ----------------------------
-- Table structure for dict
-- ----------------------------
DROP TABLE IF EXISTS `dict`;
CREATE TABLE `dict`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '字典名称',
  `code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '字典编码：唯一',
  `values` json NOT NULL COMMENT '字典内容',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of dict
-- ----------------------------
INSERT INTO `dict` VALUES ('23c2dbd8-7635-4125-ab49-1eeb6b46cdc2', '2022-10-24 02:16:50', '2022-11-01 02:45:53', ' 性别', 'user_gender', '[{\"label\": \"男\", \"value\": \"男\"}, {\"label\": \"女\", \"value\": \"女\"}, {\"label\": \"阴阳人\", \"value\": \"阴阳人\"}, {\"label\": \"保密\", \"value\": \"保密\"}]');
INSERT INTO `dict` VALUES ('47bbd2d9-956d-4f62-bc46-26728a405e77', '2022-10-24 02:15:34', '2022-12-13 09:17:53', '存储源', 'bucket_source', '[{\"label\": \"本地存储桶\", \"value\": \"local\"}, {\"label\": \"七牛云 KODO\", \"value\": \"qiniu\"}, {\"label\": \"gitee\", \"value\": \"gitee\"}, {\"label\": \"github\", \"value\": \"github\"}, {\"label\": \"Leancloud\", \"value\": \"leancloud\"}, {\"label\": \"腾讯COS\", \"value\": \"cos\"}, {\"label\": \"阿里云OSS\", \"value\": \"oss\"}, {\"label\": \"又拍云USS\", \"value\": \"uss\"}, {\"label\": \"华为云OBS\", \"value\": \"obs\"}, {\"label\": \"NextCloud网盘\", \"value\": \"nextcloud\"}, {\"label\": \"天翼云\", \"value\": \"oos\"}, {\"label\": \"青云\", \"value\": \"qingstor\"}]');
INSERT INTO `dict` VALUES ('88aeab7a-1ada-4fb9-8f2f-e9fba603aeb9', '2022-10-24 02:14:44', '2022-10-27 07:09:46', '用户职业', 'user_major', '[{\"label\": \"程序猿\", \"value\": \"程序猿\"}, {\"label\": \"程序媛\", \"value\": \"程序媛\"}, {\"label\": \"设计师\", \"value\": \"设计师\"}, {\"label\": \"开发者\", \"value\": \"开发者\"}, {\"label\": \"学生\", \"value\": \"学生\"}, {\"label\": \"其他\", \"value\": \"其他\"}]');
INSERT INTO `dict` VALUES ('9c91a16d-59a8-4a5a-bda3-5be49c749853', '2022-11-23 01:56:47', '2022-11-24 01:27:14', '相册标签', 'album_tag', '[{\"label\": \"连载\", \"value\": \"连载\"}, {\"label\": \"已完结\", \"value\": \"已完结\"}, {\"label\": \"每周一\", \"value\": \"每周一\"}, {\"label\": \"每周二\", \"value\": \"每周二\"}, {\"label\": \"每周三\", \"value\": \"每周三\"}, {\"label\": \"每周四\", \"value\": \"每周四\"}, {\"label\": \"每周五\", \"value\": \"每周五\"}, {\"label\": \"每周六\", \"value\": \"每周六\"}, {\"label\": \"每周日\", \"value\": \"每周日\"}, {\"label\": \"10:00\", \"value\": \"10:00\"}, {\"label\": \"12:00\", \"value\": \"12:00\"}]');
INSERT INTO `dict` VALUES ('b48c33b6-ab62-4cb0-a9a7-ae58f1c0c21e', '2022-10-24 02:15:19', '2022-12-13 09:51:09', ' 存储源图标', 'bucket_source_icon', '[{\"color\": \"#3fcaff\", \"label\": \"qiniu\", \"value\": \"bed-qiniu\"}, {\"color\": \"rgb(199, 29, 35)\", \"label\": \"gitee\", \"value\": \"bed-gitee\"}, {\"color\": \"#24292f\", \"label\": \"github\", \"value\": \"bed-github\"}, {\"color\": \"#18768b\", \"label\": \"local\", \"value\": \"bed-localyun\"}, {\"color\": \"#2c97e8\", \"label\": \"leancloud\", \"value\": \"bed-leancloud\"}, {\"color\": \"#e6221b\", \"label\": \"obs\", \"value\": \"bed-huawei\"}, {\"color\": \"#ff6a00\", \"label\": \"oss\", \"value\": \"bed-aliyun\"}, {\"color\": \"#0fa8ff\", \"label\": \"cos\", \"value\": \"bed-tengxunyun\"}, {\"color\": \"#6bcfed\", \"label\": \"uss\", \"value\": \"bed-upyun\"}, {\"color\": \"#0f9ae6\", \"label\": \"nextcloud\", \"value\": \"bed-nextcloud\"}, {\"color\": \"#de0629\", \"label\": \"oos\", \"value\": \"bed-tyun\"}, {\"color\": \"rgb(3, 189, 97)\", \"label\": \"qingstor\", \"value\": \"bed-qingyun\"}]');
INSERT INTO `dict` VALUES ('b6470946-d96d-4135-9904-76422125cac8', '2022-10-21 07:29:01', '2022-11-01 02:51:57', '角色', 'user_role', '[{\"label\": \"管理员\", \"value\": 10}, {\"label\": \"普通用户\", \"value\": 1}]');
INSERT INTO `dict` VALUES ('f5dbac3d-be67-498c-8795-485b8ff3ef27', '2022-10-24 02:16:34', '2022-10-24 02:16:34', '显示状态', 'show_status', '[{\"label\": \"显示\", \"value\": true}, {\"label\": \"不显示\", \"value\": false}]');

-- ----------------------------
-- Table structure for habits
-- ----------------------------
DROP TABLE IF EXISTS `habits`;
CREATE TABLE `habits`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户id',
  `shortKey` json NOT NULL COMMENT '快捷键',
  `showUpdateTip` tinyint(1) NOT NULL DEFAULT 1 COMMENT '上传成功提示',
  `showCopyTip` tinyint(1) NOT NULL DEFAULT 1 COMMENT '复制成功提示',
  `showDeleteTip` tinyint(1) NOT NULL DEFAULT 1 COMMENT '删除成功提示',
  `pasteStyle` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'url' COMMENT '上传后自动复制图片地址类型，支持：url、markdown',
  `autoPaste` tinyint(1) NOT NULL DEFAULT 0 COMMENT '上传后自动复制图片地址',
  `current` json NULL COMMENT '当前使用图床',
  `link_format` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '![]($url)' COMMENT '链接格式，默认是 ![]($url)',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of habits
-- ----------------------------
INSERT INTO `habits` VALUES ('13a7df3c-feb6-4173-8865-272b6920329c', '67b5ff47-c78e-4f13-8808-791a5690e4e9', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-03-03 08:21:24', '2023-03-03 08:21:24');
INSERT INTO `habits` VALUES ('2b2b5d80-8c89-4049-aaa3-0d76f44d79f5', 'd5a0a7b5-3655-48d2-b42c-2db94e83ce0d', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2022-11-04 06:22:19', '2022-11-04 06:22:19');
INSERT INTO `habits` VALUES ('3340ae08-0451-447c-bcb0-c2fedab4526a', 'c1803cf0-bd6e-4459-a9d1-1832bb50db18', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'custom', 1, '{}', '![${filename}](${url})', '2023-03-05 10:40:24', '2023-03-05 10:41:09');
INSERT INTO `habits` VALUES ('36585c29-6e84-4fba-a3d0-91645060fb75', '29dcb279-24d4-4252-80cb-9a299faacc76', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{\"id\": \"e40ab1d0-1408-4469-a37f-97e873128dbb\", \"tag\": \"本地存储桶\", \"name\": \"Y-pic\", \"type\": \"local\", \"config\": \"{\\\"accessKey\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\\"secretKey\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\\"bucket_name\\\":\\\"yaju\\\",\\\"domain\\\":\\\"http://img.itchenliang.club/\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"picture-ped-img/\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\\r\\n    config: [\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n        \\\"field\\\":\\\"accessKey\\\",\\r\\n        \\\"default\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n        \\\"field\\\":\\\"bucket_name\\\",\\r\\n        \\\"default\\\":\\\"yaju\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定访问网址\\\",\\r\\n        \\\"field\\\":\\\"domain\\\",\\r\\n        \\\"default\\\":\\\"http://img.itchenliang.club/\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入访问网址\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"option\\\",\\r\\n        \\\"label\\\":\\\"设定存储区域\\\",\\r\\n        \\\"field\\\":\\\"area\\\",\\r\\n        \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"options\\\": [\\r\\n          {\\r\\n            \\\"label\\\": \\\"华东区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华北区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华南区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"北美区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"新加坡区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n          }\\r\\n        ],\\r\\n        \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n        \\\"field\\\":\\\"suffix\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"指定存储路径\\\",\\r\\n        \\\"field\\\":\\\"path\\\",\\r\\n        \\\"default\\\":\\\"picture-ped-img/\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"访问前缀\\\",\\r\\n        \\\"field\\\":\\\"baseUrl\\\",\\r\\n        \\\"hidden\\\":true,\\r\\n        \\\"default\\\":\\\"${config.domain}\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"http://img.itchenliang.club/\"}', '![${filename}](${url})', '2023-03-03 06:08:20', '2023-03-03 06:12:09');
INSERT INTO `habits` VALUES ('453ae06f-8706-41d0-8965-24e70168d02a', '6a7a4a31-2e6d-4e8d-ab98-63d90cd2284c', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Control + Shift + k\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Control + h\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Control + Shift + p\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Control + Shift + U\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Control + Shift + U\"}]', 1, 1, 1, 'markdown', 1, '{\"id\": \"2c107de1-8f16-4e29-a876-eb02d435cf2b\", \"tag\": \"本地存储桶\", \"name\": \"aa\", \"type\": \"local\", \"config\": \"{\\\"accessKey\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\\"secretKey\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\\"bucket_name\\\":\\\"yaju\\\",\\\"domain\\\":\\\"http://img.itchenliang.club/\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"picture-ped-img/\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\\r\\n    config: [\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n        \\\"field\\\":\\\"accessKey\\\",\\r\\n        \\\"default\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n        \\\"field\\\":\\\"bucket_name\\\",\\r\\n        \\\"default\\\":\\\"yaju\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定访问网址\\\",\\r\\n        \\\"field\\\":\\\"domain\\\",\\r\\n        \\\"default\\\":\\\"http://img.itchenliang.club/\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入访问网址\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"option\\\",\\r\\n        \\\"label\\\":\\\"设定存储区域\\\",\\r\\n        \\\"field\\\":\\\"area\\\",\\r\\n        \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"options\\\": [\\r\\n          {\\r\\n            \\\"label\\\": \\\"华东区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华北区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华南区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"北美区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"新加坡区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n          }\\r\\n        ],\\r\\n        \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n        \\\"field\\\":\\\"suffix\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"指定存储路径\\\",\\r\\n        \\\"field\\\":\\\"path\\\",\\r\\n        \\\"default\\\":\\\"picture-ped-img/\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"访问前缀\\\",\\r\\n        \\\"field\\\":\\\"baseUrl\\\",\\r\\n        \\\"hidden\\\":true,\\r\\n        \\\"default\\\":\\\"${config.domain}\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"http://img.itchenliang.club/\"}', '[${filename}](${url})', '2022-10-26 06:16:35', '2023-03-06 13:10:06');
INSERT INTO `habits` VALUES ('4941d5f7-23e1-4950-9853-5a2e9484e363', '2b40d721-c895-436a-9dbd-0461f007f34c', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'markdown', 1, '{\"id\": \"50aedc53-57f5-454c-b347-385f94545f3e\", \"tag\": \"本地存储桶\", \"name\": \"我的存储\", \"type\": \"local\", \"config\": \"{\\\"accessKey\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\\"secretKey\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\\"bucket_name\\\":\\\"yaju\\\",\\\"domain\\\":\\\"https://imgs.itchenliang.club/\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"picture-ped-img/\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    config: [\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n        \\\"field\\\":\\\"accessKey\\\",\\r\\n        \\\"default\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n        \\\"field\\\":\\\"bucket_name\\\",\\r\\n        \\\"default\\\":\\\"yaju\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定访问网址\\\",\\r\\n        \\\"field\\\":\\\"domain\\\",\\r\\n        \\\"default\\\":\\\"https://imgs.itchenliang.club/\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入访问网址\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"option\\\",\\r\\n        \\\"label\\\":\\\"设定存储区域\\\",\\r\\n        \\\"field\\\":\\\"area\\\",\\r\\n        \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"options\\\": [\\r\\n          {\\r\\n            \\\"label\\\": \\\"华东区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华北区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华南区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"北美区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"新加坡区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n          }\\r\\n        ],\\r\\n        \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n        \\\"field\\\":\\\"suffix\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"指定存储路径\\\",\\r\\n        \\\"field\\\":\\\"path\\\",\\r\\n        \\\"default\\\":\\\"picture-ped-img/\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"访问前缀\\\",\\r\\n        \\\"field\\\":\\\"baseUrl\\\",\\r\\n        \\\"hidden\\\":true,\\r\\n        \\\"default\\\":\\\"${config.domain}\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"https://imgs.itchenliang.club/\"}', '![]($url)', '2022-10-31 02:52:53', '2023-02-20 16:13:07');
INSERT INTO `habits` VALUES ('50c6579f-31ca-48de-865e-02638ddc5d4f', 'e894c81a-43e1-4eb3-96e1-1a810a9346e1', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{\"id\": \"8f78ef3c-d14b-48b7-ba86-ee0f39b4e04b\", \"tag\": \"本地存储桶\", \"name\": \"演示存储桶\", \"type\": \"local\", \"config\": \"{\\\"accessKey\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\\"secretKey\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\\"bucket_name\\\":\\\"yaju\\\",\\\"domain\\\":\\\"https://imgs.itchenliang.club/\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"picture-ped-img/\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    config: [\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n        \\\"field\\\":\\\"accessKey\\\",\\r\\n        \\\"default\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n        \\\"field\\\":\\\"bucket_name\\\",\\r\\n        \\\"default\\\":\\\"yaju\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定访问网址\\\",\\r\\n        \\\"field\\\":\\\"domain\\\",\\r\\n        \\\"default\\\":\\\"https://imgs.itchenliang.club/\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入访问网址\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"option\\\",\\r\\n        \\\"label\\\":\\\"设定存储区域\\\",\\r\\n        \\\"field\\\":\\\"area\\\",\\r\\n        \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"options\\\": [\\r\\n          {\\r\\n            \\\"label\\\": \\\"华东区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华北区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华南区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"北美区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"新加坡区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n          }\\r\\n        ],\\r\\n        \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n        \\\"field\\\":\\\"suffix\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"指定存储路径\\\",\\r\\n        \\\"field\\\":\\\"path\\\",\\r\\n        \\\"default\\\":\\\"picture-ped-img/\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"访问前缀\\\",\\r\\n        \\\"field\\\":\\\"baseUrl\\\",\\r\\n        \\\"hidden\\\":true,\\r\\n        \\\"default\\\":\\\"${config.domain}\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"https://imgs.itchenliang.club/\"}', '![${filename}](${url})', '2023-02-23 02:56:55', '2023-02-23 03:29:32');
INSERT INTO `habits` VALUES ('5bf4aa5d-e469-4a5f-af30-b311cbeab6f8', '38143ddb-7c7b-4807-95af-fda58a56b7e5', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'ubb', 1, '{}', '![${filename}](${url})', '2023-03-03 01:43:34', '2023-03-03 01:46:04');
INSERT INTO `habits` VALUES ('60e9823f-5530-43d1-aa57-78f8734d729e', 'ac92782d-5e7e-4831-8843-bc2ace52ff90', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'ubb', 1, '{}', '![${filename}](${url})', '2023-03-03 00:42:10', '2023-03-03 00:42:37');
INSERT INTO `habits` VALUES ('61330615-8ce7-47dc-9445-8e0578767c1d', '1134c1b7-5b4e-42e4-9378-9d7513d2dcda', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-03-04 11:59:48', '2023-03-04 11:59:48');
INSERT INTO `habits` VALUES ('6d75ae9f-d39e-467d-ae17-21be8fe8f8de', '653ebfe3-62ed-4cf9-a735-7c4fc3c8a363', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-02-26 08:15:06', '2023-02-26 08:15:06');
INSERT INTO `habits` VALUES ('76607c8f-0b6b-4385-957f-5f9e47e1bbd2', '09990b74-83de-49d9-a9b7-d9dee6de7818', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'custom', 1, '{}', '![](${url})', '2022-11-01 03:40:37', '2022-11-01 03:44:49');
INSERT INTO `habits` VALUES ('805b2da0-1b16-4b8c-9d44-61a88ffa4ea0', '30c9808c-15e3-4f1b-a1af-5f285419f800', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-03-03 01:20:50', '2023-03-03 01:20:50');
INSERT INTO `habits` VALUES ('847ce5f3-d9e1-4bb8-9de7-cac455cb5d23', 'b62b9e4d-0af6-42c6-8168-3c89ba0a4226', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-02-24 07:51:32', '2023-02-24 07:51:32');
INSERT INTO `habits` VALUES ('90ca45c7-f8f3-463c-a00e-a80a243cccda', '6c7967cc-8467-4bc1-9faf-01d5458f61a0', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-02-22 15:15:36', '2023-02-22 15:16:53');
INSERT INTO `habits` VALUES ('92731c77-8922-4d81-9500-e0ffecf81609', '9629a302-05f7-4a59-99e2-ecbf9dd80b09', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{\"id\": \"46c18d49-267d-4d0a-bd31-4b46cf67f155\", \"tag\": \"本地存储桶\", \"name\": \"test\", \"type\": \"local\", \"config\": \"{\\\"accessKey\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\\"secretKey\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\\"bucket_name\\\":\\\"yaju\\\",\\\"domain\\\":\\\"http://img.itchenliang.club/\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"picture-ped-img/\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\\r\\n    config: [\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n        \\\"field\\\":\\\"accessKey\\\",\\r\\n        \\\"default\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n        \\\"field\\\":\\\"bucket_name\\\",\\r\\n        \\\"default\\\":\\\"yaju\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定访问网址\\\",\\r\\n        \\\"field\\\":\\\"domain\\\",\\r\\n        \\\"default\\\":\\\"http://img.itchenliang.club/\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入访问网址\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"option\\\",\\r\\n        \\\"label\\\":\\\"设定存储区域\\\",\\r\\n        \\\"field\\\":\\\"area\\\",\\r\\n        \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"options\\\": [\\r\\n          {\\r\\n            \\\"label\\\": \\\"华东区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华北区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华南区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"北美区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"新加坡区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n          }\\r\\n        ],\\r\\n        \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n        \\\"field\\\":\\\"suffix\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"指定存储路径\\\",\\r\\n        \\\"field\\\":\\\"path\\\",\\r\\n        \\\"default\\\":\\\"picture-ped-img/\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"访问前缀\\\",\\r\\n        \\\"field\\\":\\\"baseUrl\\\",\\r\\n        \\\"hidden\\\":true,\\r\\n        \\\"default\\\":\\\"${config.domain}\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"http://img.itchenliang.club/\"}', '![${filename}](${url})', '2023-03-03 01:40:36', '2023-03-03 01:42:38');
INSERT INTO `habits` VALUES ('9b1959b2-f1bc-4a63-8f96-b68302426402', '8577d766-4b6d-4eb8-8da8-b6846904342f', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{\"id\": \"82d12c00-9a9f-42a6-ab3f-dce39f46afa6\", \"tag\": \"七牛云 KODO\", \"name\": \"images\", \"type\": \"qiniu\", \"config\": \"{\\\"accessKey\\\":\\\"_y8ja27qSyod-SC9zbpNEpQm0efSO_z2y1iunlfz\\\",\\\"secretKey\\\":\\\"7Bl63OtbRPbH1Tlgt99vnPw258lgPC1LSL2YGQqi\\\",\\\"bucket_name\\\":\\\"images\\\",\\\"domain\\\":\\\"https://cdn.aipin100.cn\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#七牛云-kodo\',\\r\\n    config: [\\r\\n      {\\r\\n          \\\"type\\\":\\\"string\\\",\\r\\n          \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n          \\\"field\\\":\\\"accessKey\\\",\\r\\n          \\\"default\\\":\\\"\\\",\\r\\n          \\\"required\\\":true,\\r\\n          \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"password\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n          \\\"type\\\":\\\"string\\\",\\r\\n          \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n          \\\"field\\\":\\\"bucket_name\\\",\\r\\n          \\\"default\\\":\\\"\\\",\\r\\n          \\\"required\\\":true,\\r\\n          \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n          \\\"type\\\":\\\"string\\\",\\r\\n          \\\"label\\\":\\\"设定自定义域名\\\",\\r\\n          \\\"field\\\":\\\"domain\\\",\\r\\n          \\\"default\\\":\\\"\\\",\\r\\n          \\\"required\\\":true,\\r\\n          \\\"placeholder\\\":\\\"请输入自定义域名\\\",\\r\\n          \\\"tips\\\": \\\"以http://或https://开头，末尾无需斜杠\\\"\\r\\n      },\\r\\n      {\\r\\n          \\\"type\\\":\\\"option\\\",\\r\\n          \\\"label\\\":\\\"设定存储区域\\\",\\r\\n          \\\"field\\\":\\\"area\\\",\\r\\n          \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n          \\\"required\\\":true,\\r\\n          \\\"options\\\": [\\r\\n            {\\r\\n              \\\"label\\\": \\\"华东区域\\\",\\r\\n              \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n            },\\r\\n            {\\r\\n              \\\"label\\\": \\\"华北区域\\\",\\r\\n              \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n            },\\r\\n            {\\r\\n              \\\"label\\\": \\\"华南区域\\\",\\r\\n              \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n            },\\r\\n            {\\r\\n              \\\"label\\\": \\\"北美区域\\\",\\r\\n              \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n            },\\r\\n            {\\r\\n              \\\"label\\\": \\\"新加坡区域\\\",\\r\\n              \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n            }\\r\\n          ],\\r\\n          \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n          \\\"type\\\":\\\"string\\\",\\r\\n          \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n          \\\"field\\\":\\\"suffix\\\",\\r\\n          \\\"default\\\":\\\"\\\",\\r\\n          \\\"required\\\":false,\\r\\n          \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n          \\\"type\\\":\\\"string\\\",\\r\\n          \\\"label\\\":\\\"指定存储路径\\\",\\r\\n          \\\"field\\\":\\\"path\\\",\\r\\n          \\\"default\\\":\\\"\\\",\\r\\n          \\\"required\\\":false,\\r\\n          \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n          \\\"type\\\":\\\"string\\\",\\r\\n          \\\"label\\\":\\\"访问前缀\\\",\\r\\n          \\\"field\\\":\\\"baseUrl\\\",\\r\\n          \\\"hidden\\\":true,\\r\\n          \\\"default\\\":\\\"${config.domain}\\\",\\r\\n          \\\"required\\\":false,\\r\\n          \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"https://cdn.aipin100.cn\"}', '![${filename}](${url})', '2023-03-03 01:38:38', '2023-03-03 01:45:10');
INSERT INTO `habits` VALUES ('ac926862-b49a-4e52-b730-022fa325d485', 'e9d1c317-fa4d-4144-9a98-bb08cc77d9f3', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-03-03 01:18:49', '2023-03-03 01:18:49');
INSERT INTO `habits` VALUES ('b6b7d5f0-9184-4e0e-8c21-a505adbd4ace', 'c0c09a6c-2067-4452-bfde-28ab54b5c51b', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2022-11-04 03:42:03', '2022-11-04 03:42:03');
INSERT INTO `habits` VALUES ('b9244326-f32c-4fd6-9666-b2a1e42ab2a4', '1d01e0e2-2a81-4733-acb5-b4799e9b9988', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{\"id\": \"5b8f9610-8681-4058-838c-7513128f296a\", \"tag\": \"本地存储桶\", \"name\": \"中金发布月重要日程\", \"type\": \"local\", \"config\": \"{\\\"accessKey\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\\"secretKey\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\\"bucket_name\\\":\\\"yaju\\\",\\\"domain\\\":\\\"http://img.itchenliang.club/\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"picture-ped-img/\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\\r\\n    config: [\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n        \\\"field\\\":\\\"accessKey\\\",\\r\\n        \\\"default\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n        \\\"field\\\":\\\"bucket_name\\\",\\r\\n        \\\"default\\\":\\\"yaju\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定访问网址\\\",\\r\\n        \\\"field\\\":\\\"domain\\\",\\r\\n        \\\"default\\\":\\\"http://img.itchenliang.club/\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入访问网址\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"option\\\",\\r\\n        \\\"label\\\":\\\"设定存储区域\\\",\\r\\n        \\\"field\\\":\\\"area\\\",\\r\\n        \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"options\\\": [\\r\\n          {\\r\\n            \\\"label\\\": \\\"华东区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华北区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华南区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"北美区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"新加坡区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n          }\\r\\n        ],\\r\\n        \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n        \\\"field\\\":\\\"suffix\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"指定存储路径\\\",\\r\\n        \\\"field\\\":\\\"path\\\",\\r\\n        \\\"default\\\":\\\"picture-ped-img/\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"访问前缀\\\",\\r\\n        \\\"field\\\":\\\"baseUrl\\\",\\r\\n        \\\"hidden\\\":true,\\r\\n        \\\"default\\\":\\\"${config.domain}\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"http://img.itchenliang.club/\"}', '![${filename}](${url})', '2023-03-04 14:05:09', '2023-03-05 09:44:21');
INSERT INTO `habits` VALUES ('b92f0fe8-41c6-49a6-a6da-7a7ed576001b', '1ea5aa53-d345-4925-83fa-681231427891', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-03-03 05:22:20', '2023-03-03 05:22:20');
INSERT INTO `habits` VALUES ('b9b0efbd-4455-4eed-a9aa-e0179c9a848d', '84969756-0d3c-4423-a5c6-de6b6c3fbb6d', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'custom', 1, '{\"id\": \"feb1fbd3-2987-4d71-8ba2-5af669505e9d\", \"tag\": \"本地存储桶\", \"name\": \"test001\", \"type\": \"local\", \"config\": \"{\\\"accessKey\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\\"secretKey\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\\"bucket_name\\\":\\\"yaju\\\",\\\"domain\\\":\\\"http://img.itchenliang.club/\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"picture-ped-img/\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\\r\\n    config: [\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n        \\\"field\\\":\\\"accessKey\\\",\\r\\n        \\\"default\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n        \\\"field\\\":\\\"bucket_name\\\",\\r\\n        \\\"default\\\":\\\"yaju\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定访问网址\\\",\\r\\n        \\\"field\\\":\\\"domain\\\",\\r\\n        \\\"default\\\":\\\"http://img.itchenliang.club/\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入访问网址\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"option\\\",\\r\\n        \\\"label\\\":\\\"设定存储区域\\\",\\r\\n        \\\"field\\\":\\\"area\\\",\\r\\n        \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"options\\\": [\\r\\n          {\\r\\n            \\\"label\\\": \\\"华东区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华北区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华南区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"北美区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"新加坡区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n          }\\r\\n        ],\\r\\n        \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n        \\\"field\\\":\\\"suffix\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"指定存储路径\\\",\\r\\n        \\\"field\\\":\\\"path\\\",\\r\\n        \\\"default\\\":\\\"picture-ped-img/\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"访问前缀\\\",\\r\\n        \\\"field\\\":\\\"baseUrl\\\",\\r\\n        \\\"hidden\\\":true,\\r\\n        \\\"default\\\":\\\"${config.domain}\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"http://img.itchenliang.club/\"}', '![${filename}](${url})', '2023-03-03 02:30:58', '2023-03-03 02:35:03');
INSERT INTO `habits` VALUES ('c000c9dc-4226-4c8c-8647-913921485d58', 'a0f5dfcb-d2a7-491a-b3d1-5cd2e1d7170e', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{\"id\": \"3fdd1f28-4587-4cfa-ad5b-d977340c8001\", \"tag\": \"本地存储桶\", \"name\": \"111\", \"type\": \"local\", \"config\": \"{\\\"accessKey\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\\"secretKey\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\\"bucket_name\\\":\\\"yaju\\\",\\\"domain\\\":\\\"http://img.itchenliang.club/\\\",\\\"area\\\":\\\"qiniu.region.z0\\\",\\\"suffix\\\":\\\"\\\",\\\"path\\\":\\\"picture-ped-img/\\\",\\\"baseUrl\\\":\\\"${config.domain}\\\"}\", \"plugin\": \"(() => {\\r\\n  return {\\r\\n    version: \'1.0.0\',\\r\\n    doc: \'https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc#本地存储桶\',\\r\\n    config: [\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定AccessKey\\\",\\r\\n        \\\"field\\\":\\\"accessKey\\\",\\r\\n        \\\"default\\\":\\\"mVGmIkaYxQTAdr2OVQrlxZVTUMMZHPl1DfCSCusn\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入AccessKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定SecretKey\\\",\\r\\n        \\\"field\\\":\\\"secretKey\\\",\\r\\n        \\\"default\\\":\\\"okkbqh5DaceVTr1AVfOCnH6XLi_xynQo7DlA2SQM\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入SecretKey\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定存储空间名\\\",\\r\\n        \\\"field\\\":\\\"bucket_name\\\",\\r\\n        \\\"default\\\":\\\"yaju\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入存储空间名\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定访问网址\\\",\\r\\n        \\\"field\\\":\\\"domain\\\",\\r\\n        \\\"default\\\":\\\"http://img.itchenliang.club/\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"请输入访问网址\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"option\\\",\\r\\n        \\\"label\\\":\\\"设定存储区域\\\",\\r\\n        \\\"field\\\":\\\"area\\\",\\r\\n        \\\"default\\\":\\\"qiniu.region.z0\\\",\\r\\n        \\\"required\\\":true,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"options\\\": [\\r\\n          {\\r\\n            \\\"label\\\": \\\"华东区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华北区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z1\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"华南区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.z2\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"北美区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.na0\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"label\\\": \\\"新加坡区域\\\",\\r\\n            \\\"value\\\": \\\"qiniu.region.as0\\\"\\r\\n          }\\r\\n        ],\\r\\n        \\\"placeholder\\\":\\\"请选择存储区域\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"设定网址后缀\\\",\\r\\n        \\\"field\\\":\\\"suffix\\\",\\r\\n        \\\"default\\\":\\\"\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: imageView2/0/q/75|watermark/2/text/6ZuF5bGF5peF5ri45rCR5a6_/font/5a6L5L2T/fontsize/360/fill/I0ZBRkFGQQ==/dissolve/100/gravity/SouthEast/dx/15/dy/15|imageslim\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"指定存储路径\\\",\\r\\n        \\\"field\\\":\\\"path\\\",\\r\\n        \\\"default\\\":\\\"picture-ped-img/\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"hidden\\\": true,\\r\\n        \\\"placeholder\\\":\\\"例如: img/\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"type\\\":\\\"string\\\",\\r\\n        \\\"label\\\":\\\"访问前缀\\\",\\r\\n        \\\"field\\\":\\\"baseUrl\\\",\\r\\n        \\\"hidden\\\":true,\\r\\n        \\\"default\\\":\\\"${config.domain}\\\",\\r\\n        \\\"required\\\":false,\\r\\n        \\\"placeholder\\\":\\\"请输入baseUrl\\\"\\r\\n      }\\r\\n    ],\\r\\n    uploader: {\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      beforeEach: async function (file) {\\r\\n        return await this.axios({\\r\\n          url: \'http://124.222.54.192:3002/api/v1/tool/qiniuSign\',\\r\\n          method: \\\"POST\\\",\\r\\n          headers: {\\r\\n            authorization: localStorage.getItem(\'token\')\\r\\n          },\\r\\n          data: {\\r\\n            accessKey: \'${config.accessKey}\',\\r\\n            secretKey: \'${config.secretKey}\',\\r\\n            bucket: \'${config.bucket_name}\',\\r\\n            expires: 7200\\r\\n          }\\r\\n        })\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      request: async function (file) {\\r\\n        const res = await this.beforeEach(file)\\r\\n        const formData = new FormData()\\r\\n        formData.append(\'file\', file.file)\\r\\n        formData.append(\'token\', res.data.data.token)\\r\\n        formData.append(\'key\', \'${config.path}\' + file.filename)\\r\\n        formData.append(\'fname\', file.filename)\\r\\n        return {\\r\\n          url: \'https://upload.qiniup.com/\',\\r\\n          method: \'post\',\\r\\n          data: formData\\r\\n        }\\r\\n      },\\r\\n      // 注意：不要使用箭头函数，否则会改变this的指向\\r\\n      response: function (res) {\\r\\n        const tmp = res.data\\r\\n        return {\\r\\n          img_url: tmp.key,\\r\\n          hash: tmp.hash\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n})()\", \"config_baseUrl\": \"http://img.itchenliang.club/\"}', '![${filename}](${url})', '2022-11-10 08:10:22', '2023-03-06 10:48:24');
INSERT INTO `habits` VALUES ('cacfe1ba-74b5-4f9d-822d-baad3340359e', '7fbc3a0b-0e67-46ac-a9f4-081ce9b76bc7', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'custom', 1, '{}', '![${filename}](${url})', '2023-02-23 03:03:57', '2023-02-23 03:04:46');
INSERT INTO `habits` VALUES ('d3bb578f-b008-4a30-ac50-738adc37e70b', '7c0ed7a3-c5a7-4945-b348-9eccc19a6762', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-03-03 07:16:02', '2023-03-03 07:16:02');
INSERT INTO `habits` VALUES ('f3ff0ecb-17ef-4d26-9f29-b2b28a655bde', '761e30e3-9536-4175-9df3-f9c2308aeea5', '[{\"id\": 1, \"key\": \"快捷上传\", \"label\": \"点击快捷键自动上传粘贴板中的图片\", \"value\": \"Command + K\"}, {\"id\": 2, \"key\": \"帮助中心\", \"label\": \"点击快捷键自动打开帮助中心窗口\", \"value\": \"Command + H\"}, {\"id\": 3, \"key\": \"个人中心\", \"label\": \"点击快捷键自动进入个人中心\", \"value\": \"Command + P + C\"}, {\"id\": 4, \"key\": \"上传网络图片\", \"label\": \"点击快捷键自动上传粘贴板中的网络图片\", \"value\": \"Command + P + C\"}, {\"id\": 5, \"key\": \"快捷退出\", \"label\": \"点击快捷键自动退出登录\", \"value\": \"Command + P + C\"}]', 1, 1, 1, 'url', 1, '{}', '![${filename}](${url})', '2023-03-06 13:41:21', '2023-03-06 13:41:21');

-- ----------------------------
-- Table structure for image
-- ----------------------------
DROP TABLE IF EXISTS `image`;
CREATE TABLE `image`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `bucket_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储桶id',
  `bucket_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '存储桶类型',
  `img_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图片名称',
  `img_width` float NOT NULL DEFAULT 0 COMMENT '图片宽度',
  `img_height` float NOT NULL DEFAULT 0 COMMENT '图片高度',
  `mine_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文件类型',
  `img_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图片url',
  `img_size` float NOT NULL COMMENT '图片大小',
  `hash` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'hash值：用于后续更新时使用',
  `uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户id',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `album_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '相册id',
  `add_time` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '添加进相册时间',
  `sort` int(11) NOT NULL DEFAULT 0 COMMENT '图片在相册中的排序值',
  `tags` json NOT NULL COMMENT '标签',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of image
-- ----------------------------

-- ----------------------------
-- Table structure for log
-- ----------------------------
DROP TABLE IF EXISTS `log`;
CREATE TABLE `log`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `type` int(11) NOT NULL COMMENT '操作类别',
  `operate_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '操作id',
  `operate_cont` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '操作记录',
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '操作内容',
  `uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '操作人，用户id',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `client_info` json NULL COMMENT '客户端信息',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of log
-- ----------------------------

-- ----------------------------
-- Table structure for login
-- ----------------------------
DROP TABLE IF EXISTS `login`;
CREATE TABLE `login`  (
  `user_id` int(11) NOT NULL,
  `login_date` date NULL DEFAULT NULL
) ENGINE = InnoDB CHARACTER SET = gbk COLLATE = gbk_chinese_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of login
-- ----------------------------

-- ----------------------------
-- Table structure for role
-- ----------------------------
DROP TABLE IF EXISTS `role`;
CREATE TABLE `role`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色名称',
  `priority` int(11) NOT NULL DEFAULT 1 COMMENT '角色排序',
  `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '角色状态',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '角色备注',
  `ctime` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '2023-03-06 21:35:47' COMMENT '创建时间',
  `mtime` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '2023-03-06 21:35:47' COMMENT '修改时间',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of role
-- ----------------------------

-- ----------------------------
-- Table structure for setting
-- ----------------------------
DROP TABLE IF EXISTS `setting`;
CREATE TABLE `setting`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `website` json NOT NULL COMMENT '网站信息',
  `contact` json NOT NULL COMMENT '联系我们',
  `system` json NOT NULL COMMENT '系统配置',
  `uplog` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '更新日志url',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `bucket_service` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '存储桶后台服务配置',
  `plugin` json NOT NULL COMMENT '插件配置',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of setting
-- ----------------------------
INSERT INTO `setting` VALUES ('8082c61c-0393-40cc-bec9-2e6da6752584', '{\"ico\": \"/PCi9afANyIBE4jz5P55EMKUSXrBcnzQJ/ico.ico\", \"desc\": \"轻量图片资源管理系统、图床系统，具有云储存、多桶管理、操作简便、图片预览、易管理、易部署等特点。\", \"keys\": [\"aa\"], \"logo\": \"/e4TyxC3fN5Mxq2P8PxFHcCbllUPoLzhE/logo.png\", \"name\": \"轻快图片管理系统\", \"title\": \"【LightFastPicture】轻量级快捷图片管理系统\", \"author\": \"aa\", \"domain\": \"aa\", \"baseUrl\": \"http://lc-DZNcsGI3.cn-n1.lcfile.com\", \"version\": \"1.0.0\", \"subtitle\": \"aa\", \"ico_preview\": \"http://lc-DZNcsGI3.cn-n1.lcfile.com/PCi9afANyIBE4jz5P55EMKUSXrBcnzQJ/ico.ico\", \"logo_preview\": \"http://lc-DZNcsGI3.cn-n1.lcfile.com/e4TyxC3fN5Mxq2P8PxFHcCbllUPoLzhE/logo.png\", \"reward_alipay\": \"/FnXBNkKfhnOYoLppJGSWQY6dUh1rnMHA/reward_alipay.jpg\", \"reward_weixin\": \"/PAMB9Ah4luFLiVvwp6oVh6pelyPudsNK/reward_weixin.jpg\", \"reward_alipay_preview\": \"http://lc-DZNcsGI3.cn-n1.lcfile.com/FnXBNkKfhnOYoLppJGSWQY6dUh1rnMHA/reward_alipay.jpg\", \"reward_weixin_preview\": \"http://lc-DZNcsGI3.cn-n1.lcfile.com/PAMB9Ah4luFLiVvwp6oVh6pelyPudsNK/reward_weixin.jpg\"}', '{\"qq\": \"aa\", \"about\": \"使用koa2 + mysql + vue3.x + typescript + vite开发的一套轻量级企业团队图片资源管理系统、图床系统。\\n**功能简介**\\n- 支持第三方云储存，本地、阿里云OSS、腾讯云COS、七牛云KODO、又拍云USS、华为云OBS等等\\n- 支持多桶储存，可同时添加多个对象存储桶管理，适合团队多桶协作\\n- 多图上传、拖拽上传、粘贴上传、上传预览、全屏预览、一键复制图片外链\\n- 多用户管理、分组管理；不同分组用户控制不同的存储桶\\n- 完整的权限控制功能，不同用户组可分配不同的操作权限，控制其上传删除及查看\\n- 完整的可视化日志功能，记录用户所有操作，方便事件溯源\\n- 全局配置用户初始剩余储存空间、设置指定用户剩余储存空间\\n- 支持接口上传、接口删除\\n- 原创Geek扁平化页面风格，高性能 / 精致 / 优雅 / 简洁而不简单；\\n```js\\nfunction demo () {\\n  console.log(123)\\n}\\n```\\n\\n参考:\\n- [lsky-搭建一个属于自己的图床](https://www.solaacg.com/archives/1.html)\\n- [Chevereto图床搭建 | 利用云服务器搭建免费图床完整教程](https://blog.csdn.net/JunyouYH/article/details/116092326)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"email\": \"\", \"gitee\": \"aa\", \"github\": \"aa\", \"weixin\": \"aa\", \"qq_group\": \"aa\"}', '{\"accept\": [\"jpeg\", \"jpg\", \"webp\", \"ico\", \"gif\", \"png\"], \"map_key\": \"\", \"maxsize\": 10, \"icon_url\": \"//at.alicdn.com/t/c/font_3716643_vtle4nlspsr.css\", \"map_type\": \"baidu\", \"maxcount\": 5, \"icon_font\": \"picturebed\", \"mail_pass\": \"\", \"mail_user\": \"\", \"icon_prefix\": \"bed-\", \"storage_size\": 1024, \"storage_count\": 0, \"copyright_time\": \"2022-10-19\", \"copyright_company\": \"北京世纪安图数码科技发展有限公司\", \"copyright_miiturl\": \"https://beian.miit.gov.cn/\", \"copyright_miitbeian\": \"蜀ICP备19023554号-2\"}', '## 2023-02-17\n**Todo**\n1. 数据迁移/数据备份：考虑到有的朋友原先使用的是其他图床系统，需要将数据迁移到本系统中；或者需要将本系统中的图片迁移到其他图床系统中。\n    1. 存储桶支持一键导出所有图片(即将该存储桶中的图片一键批量下载到zip包中)\n    2. 存储桶支持一键导入所有图片(即将zip包中的图片一键批量上传到存储桶中)\n 2. 新增存储桶插件\n     1. bilibili存储桶\n     2. csdn存储桶\n \n## 2023-03-01\n1. `U`ip定位服务由高德地图切换至百度地图(原因：高德地图对于连接的手机热点网络时定位数据返回空，而百度地图不会)\n2. `A`管理端日志管理新增`定位`按钮，便于管理员修复以前使用高德地图定位服务失败的数据\n\n## 2023-02-27\n1. `P`优化删除图片时提示(只删除记录并不删除实际图片)\n\n## 2023-02-23\n1. `A`完善存储桶的配置说明文档\n2. `A`存储桶创建过程添加文档说明(方便用户查看配置手册)\n3. `A`密码统一使用md5加密\n4. `U`修复登录注册忘记密码页按钮可重复点击多次调用多次接口问题\n\n## 2023-02-22\n1. `U`修复从相册中去覆盖上传图片，图片上传后地址栏出现undefined问题\n2. `A`操作日志新增`访问来源`和`访问ip`字段，同时首页上传记录添加`访问来源`\n3. `U`修复邮件发送失败问题\n4. `A`新增邮箱验证码登录方式\n5. `P`优化用户体验(登录注册相关的填写邮箱地址不再需要填写邮箱后缀，提升用户体验)\n\n## 2023-01-05\n1. `P`优化图库的覆盖上传按钮只有当鼠标移入时才显示\n2. `A`新增存储桶批量导出图片到压缩包，方便用户数据迁移。\n3. `A`登录和注册填写邮箱时给个输入建议。\n\n## 2022-12-08\n1. `P`优化存储桶配置表单select添加filter属性\n2. `U`gitee和github图床看是否能够通过自动获取的方式，将分支罗列出来。\n3. `A`存储桶插件更新添加个历史版本记录功能，并且可以使用monaco-editor进行差异对比。\n4. `U`将上传进度保存到pinia中，避免还在上传中切换菜单，导致上传被中断，并且提供上传进度中心，可以进行管理，类似于[uniapp的前端网页托管功能](https://unicloud.dcloud.net.cn/pages/web-host/web-host?pageid=2)或者[七牛云的任务中心功能]()，如下图所示功能：\n\n![202212090929558.png](https://raw.githubusercontent.com/ischenliang/imgs/main/hehe/202212090929558.png)\n![202212090929558.png](https://raw.githubusercontent.com/ischenliang/imgs/main/hehe/202212090929558.png)\n\n\n## 2022-11-25\n1. `P`优化相册图片搜索交互(可按回车直接搜索，可以清除搜索内容)\n2. `P`调整相册标签选择窗口标签列表上下间距\n3. `P`相册下进入首页上传图片需要记住页码和筛选条件（例如在第二页点击\"去上传\"，然后返回相册需停留在第二页）\n4. `P`相册下删除图片标签后如果删除的标签列表中包含当前高亮标签应当将标签设置为“全部”\n\n## 2022-11-24\n1. `A`新增相册下的图片可以重新上传覆盖功能（交互呈现方式参考:[pure-admin](https://yiming_chang.gitee.io/vue-pure-admin/#/list/card)）\n2. `P`优化相册图片编辑标签弹窗的标签列表呈现效果\n\n## 2022-11-23\n1. `A`相册下图片支持筛选功能\n2. `A`图片支持设置标签tags(局限于相册下的图片)\n3. `U`图片卡片调整排版，并设置相应动画\n<img class=\"img-medium\" src=\"https://imgs.itchenliang.club/img/202211231716088.png\" alt=\"202211231716088.png\" />\n\n## 2022-11-22\n1. `A`新增相册下图片可以置顶功能，同时也可以取消置顶\n2. `F`修复正式环境图片不能复制问题\n<img class=\"img-medium\" src=\"https://imgs.itchenliang.club/img/2022112218022310.png\" alt=\"2022112218022310.png\" />\n\n## 2022-11-11\n1. `F`修复相册顶部内容未撑开问题\n\n## 2022-11-10\n1. `U`系统管理下的存储桶源添加状态属性，用于实现存储桶源是否启用\n2. `U`系统管理下的用户管理切换状态时禁止更新`updatedAt`属性，为`sequelize`添加`slient`属性\n3. `U`存储桶管理切换状态时禁止更新`updatedAt`属性，为`sequelize`添加`slient`属性\n4. `U`存储桶管理状态不同时显示不同效果\n<img class=\"img-medium\" src=\"https://imgs.itchenliang.club/img/202211100946109.png\" alt=\"202211100946109.png\" />\n5. `U`图库可以进行名称重命名\n\n## 2022-11-09\n1. `U`相册功能联调后台，同时支持相册直接跳转到上传区，将图片直接上传到相册\n2. `F`修复部署时图库详情打不开问题，导致原因`eval`不能正常使用，修改使用正则实现\n\n## 2022-11-07\n1. `A`新增相册功能，并实现相册界面排版\n\n## 2022-11-02\n1. `U`更新登录页面样式，添加图形验证码以及两种切换登录方式\n\n## 2022-11-01\n1. `A`公共资源管理员权限拦截处理\n2. `A`管理端直接新建用户账号\n3. `A`注册时判断账号是否已存在，并且登录时写入日志内容\n4. `U`字典和存储桶源管理弹窗操作后提示操作成功\n5. `U`删除日志时二次确认是否确定删除\n6. `A`个人中心的使用分析统计界面排版设计\n\n## 2022-10-31\n1. `A`动态路由功能实现以及路由拦截处理\n2. `U`根据动态路由来渲染菜单栏\n3. `A`操作日志功能实现\n4. `U`系统列表右上角的操作按钮大小统一使用`default`尺寸\n5. `F`解决首页上传数量限制问题，采用管理员配置的数量做限制\n6. `U`调整相册页每一项的高度从`250px` -> `210px`\n\n## 2022-10-28\n1. `A`更新日志功能实现\n2. `U`首页今日操作历史记录为空时提示无记录\n3. `A`修改密码功能实现\n4. `U`调整路由配置，包括用户端的操作日志和使用分析以及更新日志\n5. `A`新增`juejin-markdown-themes`依赖\n6. `U`路由前置守卫中将获取系统默认配置抽离到拦截外\n\n## 2022-10-27\n1. `A`个人中心功能实现\n2. `A`新增一系列用户可选头像\n3. `A`首页上的历史记录功能实现(今日)\n\n## 2022-10-21\n1. `U`将登录板块抽离出来调用自己的koa后台\n2. `U`将后台板块都抽离出来使用自己的koa后台，为了避免出现其他问题\n\n## 2022-10-20\n1. `U`更新首页上传时的文件类型和大小限制从systemConfig中提取\n2. `U`调整系统配置时的文件上传大小和存储桶容量限制单位从KB -> MB\n3. `A`首页上传时不符合要求(大小和类型)的文件notify提示\n\n## 2022-10-19\n1. `A`系统设置功能联调\n2. `U`更新优化bytemd富文本组件\n3. `D`去除使用reset.css浏览器默认样式重置库\n4. `A`封装img-upload组件，用于单独上传一张图片', '2022-10-24 03:12:26', '2023-03-06 13:43:32', '[\r\n  {\r\n    \"label\": \"文档中心\",\r\n    \"link\": \"https://gitee.com/itchenliang/quickly-picture-bed/tree/koa-controller/doc\",\r\n    \"target\": \"_blank\"\r\n  },\r\n  {\r\n    \"label\": \"Github\",\r\n    \"link\": \"https://github.com/ischenliang/quickly-picture-bed\",\r\n    \"target\": \"_blank\"\r\n  },\r\n  {\r\n    \"label\": \"Gitee\",\r\n    \"link\": \"https://gitee.com/itchenliang/quickly-picture-bed\",\r\n    \"target\": \"_blank\"\r\n  }\r\n]', '{\"default\": \"(() => {\\r\\n\\treturn {\\r\\n\\t\\t// 用户视图能看见什么样的表单\\r\\n\\t\\tconfig: [\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\\"type\\\":\\\"string\\\",\\r\\n\\t\\t\\t\\t\\\"label\\\":\\\"设定用户名\\\",\\r\\n\\t\\t\\t\\t\\\"field\\\":\\\"username\\\",\\r\\n\\t\\t\\t\\t\\\"default\\\":\\\"\\\",\\r\\n\\t\\t\\t\\t\\\"required\\\":true,\\r\\n\\t\\t\\t\\t\\\"placeholder\\\":\\\"请输入用户名\\\"\\r\\n\\t\\t\\t}\\r\\n\\t\\t],\\r\\n\\t\\t// 上传配置\\r\\n\\t\\tuploader: {\\r\\n\\t\\t\\t// 注意：不要使用箭头函数，否则会改变this的指向\\r\\n\\t\\t\\t// 前置操作：返回请求配置前的操作，例如数据处理、获取token等操作\\r\\n\\t\\t\\tbeforeEach: async function () {\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t// 注意：不要使用箭头函数，否则会改变this的指向\\r\\n\\t\\t\\t// 需要返回axios的RequestConfig类型的请求配置，参考：https://www.axios-http.cn/docs/req_config\\r\\n\\t\\t\\trequest: async function (file) {\\r\\n\\t\\t\\t\\treturn {\\r\\n\\t\\t\\t\\t\\turl: \\\"\\\",\\r\\n\\t\\t\\t\\t\\tmethod: \\\"\\\",\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t// 注意：不要使用箭头函数，否则会改变this的指向\\r\\n\\t\\t\\t// 此处res代表axios的response，从res中拿到数据并需返回{ img_url: \\\"\\\", hash: \\\"\\\" }格式\\r\\n\\t\\t\\tresponse: function (res) {\\r\\n\\t\\t\\t\\treturn {\\r\\n\\t\\t\\t\\t\\timg_url: \\\"\\\",\\r\\n\\t\\t\\t\\t\\thash: \\\"\\\"\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n})()\"}');

-- ----------------------------
-- Table structure for smscode
-- ----------------------------
DROP TABLE IF EXISTS `smscode`;
CREATE TABLE `smscode`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `account` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '账号，邮箱或者手机号',
  `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '类别，可选email|phone',
  `code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '验证码内容',
  `expire_at` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '验证码有效期',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of smscode
-- ----------------------------

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `phone` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '手机号',
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '邮箱',
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '密码',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '星座_白羊座' COMMENT '头像',
  `role` int(11) NOT NULL DEFAULT 1 COMMENT '用户角色',
  `desc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '个人简介',
  `major` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户职业',
  `gender` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户性别',
  `address` json NOT NULL COMMENT '用户地址:省、市、区、街道地址',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  `token` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '登录token',
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '默认名称' COMMENT '用户昵称',
  `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '用户状态',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `email`(`email`) USING BTREE,
  UNIQUE INDEX `phone`(`phone`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('6a7a4a31-2e6d-4e8d-ab98-63d90cd2284c', '', 'admin@163.com', '5a8366fc9da3ff99c9b5a21702664735', '星座_水瓶座', 10, '这是我的个人简介......', '程序猿', '男', '[\"51\", \"5101\", \"510105\"]', '2022-10-21 05:29:26', '2023-03-06 13:43:17', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiNmE3YTRhMzEtMmU2ZC00ZThkLWFiOTgtNjNkOTBjZDIyODRjIiwicm9sZSI6MTAsImlhdCI6MTY3ODExMDE5NywiZXhwIjoxNjc4MTk2NTk3fQ.T9j7UDR9D8RInkfxnBq04udUuexe8Z_IKMoZz38Ugc4', '演示账号', 1);

-- ----------------------------
-- Table structure for verifycode
-- ----------------------------
DROP TABLE IF EXISTS `verifycode`;
CREATE TABLE `verifycode`  (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'uuid',
  `code` blob NOT NULL COMMENT '验证码内容',
  `anser` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '验证码答案',
  `expire_at` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '验证码有效期',
  `createdAt` datetime(0) NOT NULL,
  `updatedAt` datetime(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of verifycode
-- ----------------------------

SET FOREIGN_KEY_CHECKS = 1;
